/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Specifies the format of the BOM. This helps to identify the file as CycloneDX since BOMs do not have a filename convention nor does JSON schema support namespaces.
 */
export type BOMFormat = "CycloneDX";
/**
 * The version of the CycloneDX specification a BOM is written to (starting at version 1.2)
 */
export type CycloneDXSpecificationVersion = string;
/**
 * Every BOM generated should have a unique serial number, even if the contents of the BOM being generated have not changed over time. The process or tool responsible for creating the BOM should create random UUID's for every BOM generated.
 */
export type BOMSerialNumber = string;
/**
 * The version allows component publishers/authors to make changes to existing BOMs to update various aspects of the document such as description or licenses. When a system is presented with multiple BOMs for the same component, the system should use the most recent version of the BOM. The default version is '1' and should be incremented for each version of the BOM that is published. Each version of a component should have a unique BOM and if no changes are made to the BOMs, then each BOM will have a version of '1'.
 */
export type BOMVersion = number;
/**
 * The date and time (timestamp) when the document was created.
 */
export type Timestamp = string;
/**
 * The date and time (timestamp) when the document was created.
 */
export type ToolVendor = string;
/**
 * The date and time (timestamp) when the document was created.
 */
export type ToolName = string;
/**
 * The date and time (timestamp) when the document was created.
 */
export type ToolVersion = string;
export type HashAlgorithm =
  | "MD5"
  | "SHA-1"
  | "SHA-256"
  | "SHA-384"
  | "SHA-512"
  | "SHA3-256"
  | "SHA3-384"
  | "SHA3-512"
  | "BLAKE2b-256"
  | "BLAKE2b-384"
  | "BLAKE2b-512"
  | "BLAKE3";
export type HashContentValue = string;
/**
 * The hashes of the tool (if applicable).
 */
export type Hashes = HashObjects[];
/**
 * The tool(s) used in the creation of the BOM.
 */
export type CreationTools = Tool[];
/**
 * The name of a contact
 */
export type Name = string;
/**
 * The email address of the contact. Multiple email addresses are allowed.
 */
export type EmailAddress = string;
/**
 * The phone number of the contact. Multiple phone numbers are allowed.
 */
export type Phone = string;
/**
 * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
 */
export type Authors = OrganizationalContactObject[];
/**
 * Specifies the type of component. For software components, classify as application if no more specific appropriate classification is available or cannot be determined for the component.
 */
export type ComponentType =
  | "application"
  | "framework"
  | "library"
  | "container"
  | "operating-system"
  | "device"
  | "firmware"
  | "file";
/**
 * The optional mime-type of the component. When used on file components, the mime-type can provide additional context about the kind of file being represented such as an image, font, or executable. Some library or framework components may also have an associated mime-type.
 */
export type MimeType = string;
/**
 * An optional identifier which can be used to reference the component elsewhere in the BOM. Every bom-ref should be unique.
 */
export type BOMReference = string;
/**
 * The name of the organization
 */
export type Name1 = string;
/**
 * The URL of the organization. Multiple URLs are allowed.
 */
export type URL = string & unknown[];
/**
 * A contact at the organization. Multiple contacts are allowed.
 */
export type Contact = OrganizationalContactObject[];
/**
 * The person(s) or organization(s) that authored the component
 */
export type ComponentAuthor = string;
/**
 * The person(s) or organization(s) that published the component
 */
export type ComponentPublisher = string;
/**
 * The grouping name or identifier. This will often be a shortened, single name of the company or project that produced the component, or the source package or domain name. Whitespace and special characters should be avoided. Examples include: apache, org.apache.commons, and apache.org.
 */
export type ComponentGroup = string;
/**
 * The name of the component. This will often be a shortened, single name of the component. Examples: commons-lang3 and jquery
 */
export type ComponentName = string;
/**
 * The component version. The version should ideally comply with semantic versioning but is not enforced.
 */
export type ComponentVersion = string;
/**
 * Specifies a description for the component
 */
export type ComponentDescription = string;
/**
 * Specifies the scope of the component. If scope is not specified, 'required' scope should be assumed by the consumer of the BOM
 */
export type ComponentScope = "required" | "optional" | "excluded";
export type ComponentHashes = HashObjects[];
export type ComponentLicenseS = {
  [k: string]: unknown;
}[];
/**
 * An optional copyright notice informing users of the underlying claims to copyright ownership in a published work.
 */
export type ComponentCopyright = string;
/**
 * DEPRECATED - DO NOT USE. This will be removed in a future version. Specifies a well-formed CPE name. See https://nvd.nist.gov/products/cpe
 */
export type ComponentCommonPlatformEnumerationCPE = string;
export type ComponentPackageURLPurl = string;
/**
 * Maps to the tagId of a SoftwareIdentity.
 */
export type TagID = string;
/**
 * Maps to the name of a SoftwareIdentity.
 */
export type Name2 = string;
/**
 * Maps to the version of a SoftwareIdentity.
 */
export type Version = string;
/**
 * Maps to the tagVersion of a SoftwareIdentity.
 */
export type TagVersion = number;
/**
 * Maps to the patch of a SoftwareIdentity.
 */
export type Patch = boolean;
/**
 * Specifies the content type of the text. Defaults to text/plain if not specified.
 */
export type ContentType = string;
/**
 * Specifies the optional encoding the text is represented in.
 */
export type Encoding = "base64";
/**
 * The attachment data
 */
export type AttachmentText1 = string;
export type URL1 = string;
/**
 * DEPRECATED - DO NOT USE. This will be removed in a future version. Use the pedigree element instead to supply information on exactly how the component was modified. A boolean value indicating is the component has been modified from the original. A value of true indicates the component is a derivative of the original. A value of false indicates the component has not been modified from the original.
 */
export type ComponentModifiedFromOriginal = boolean;
/**
 * The URL to the external reference
 */
export type URL2 = string;
/**
 * An optional comment describing the external reference
 */
export type Comment = string;
/**
 * Specifies the type of external reference. There are built-in types to describe common references. If a type does not exist for the reference being referred to, use the "other" type.
 */
export type Type =
  | "vcs"
  | "issue-tracker"
  | "website"
  | "advisories"
  | "bom"
  | "mailing-list"
  | "social"
  | "chat"
  | "documentation"
  | "support"
  | "distribution"
  | "license"
  | "build-meta"
  | "build-system"
  | "other";
export type ExternalReferences = ExternalReference[];
export type Components = ComponentObject[];
/**
 * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
 */
export type Ancestors = ComponentObject[];
/**
 * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
 */
export type Descendants = ComponentObject[];
/**
 * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
 */
export type Variants = ComponentObject[];
/**
 * A unique identifier of the commit. This may be version control specific. For example, Subversion uses revision numbers whereas git uses commit hashes.
 */
export type UID = string;
/**
 * The URL to the commit. This URL will typically point to a commit in a version control system.
 */
export type URL3 = string;
/**
 * The timestamp in which the action occurred
 */
export type Timestamp1 = string;
/**
 * The name of the individual who performed the action
 */
export type Name3 = string;
/**
 * The email address of the individual who performed the action
 */
export type EMail = string;
/**
 * The text description of the contents of the commit
 */
export type Message = string;
/**
 * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
 */
export type Commits = Commit[];
/**
 * Specifies the purpose for the patch including the resolution of defects, security issues, or new behavior or functionality
 */
export type Type1 = "unofficial" | "monkey" | "backport" | "cherry-pick";
/**
 * Specifies the URL to the diff
 */
export type URL4 = string;
/**
 * Specifies the type of issue
 */
export type Type2 = "defect" | "enhancement" | "security";
/**
 * The identifier of the issue assigned by the source of the issue
 */
export type ID = string;
/**
 * The name of the issue
 */
export type Name4 = string;
/**
 * A description of the issue
 */
export type Description = string;
/**
 * The name of the source. For example 'National Vulnerability Database', 'NVD', and 'Apache'
 */
export type Name5 = string;
/**
 * The url of the issue documentation as provided by the source
 */
export type URL5 = string;
/**
 * A collection of URL's for reference. Multiple URLs are allowed.
 */
export type References = string & unknown[];
/**
 * A collection of issues the patch resolves
 */
export type Resolves = Diff1[];
/**
 * >A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
 */
export type Patches = Patch1[];
/**
 * Notes, observations, and other non-structured commentary describing the components pedigree.
 */
export type Notes = string;
export type Components1 = ComponentObject[];
/**
 * An optional identifier which can be used to reference the service elsewhere in the BOM. Every bom-ref should be unique.
 */
export type BOMReference1 = string;
/**
 * The grouping name, namespace, or identifier. This will often be a shortened, single name of the company or project that produced the service or domain name. Whitespace and special characters should be avoided.
 */
export type ServiceGroup = string;
/**
 * The name of the service. This will often be a shortened, single name of the service.
 */
export type ServiceName = string;
/**
 * The service version.
 */
export type ServiceVersion = string;
/**
 * Specifies a description for the service
 */
export type ServiceDescription = string;
/**
 * The endpoint URIs of the service. Multiple endpoints are allowed.
 */
export type Endpoints = string & unknown[];
/**
 * A boolean value indicating if the service requires authentication. A value of true indicates the service requires authentication prior to use. A value of false indicates the service does not require authentication.
 */
export type AuthenticationRequired = boolean;
/**
 * A boolean value indicating if use of the service crosses a trust zone or boundary. A value of true indicates that by using the service, a trust boundary is crossed. A value of false indicates that by using the service, a trust boundary is not crossed.
 */
export type CrossesTrustBoundary = boolean;
export type DataFlowDirection = "inbound" | "outbound" | "bi-directional" | "unknown";
/**
 * Specifies the data classification.
 */
export type DataClassification = HashObjects1[];
export type ComponentLicenseS1 = {
  [k: string]: unknown;
}[];
export type ExternalReferences1 = ExternalReference[];
export type Services1 = ServiceObject[];
export type Services = ServiceObject[];
/**
 * External references provide a way to document systems, sites, and information that may be relevant but which are not included with the BOM.
 */
export type ExternalReferences2 = ExternalReference[];
/**
 * References a component by the components bom-ref attribute
 */
export type Reference = string;
export type RefType = string;
/**
 * The bom-ref identifiers of the components that are dependencies of this dependency object.
 */
export type DependsOn = RefType[];
/**
 * Provides the ability to document dependency relationships.
 */
export type Dependencies = Dependency[];

export interface CycloneDXSoftwareBillOfMaterialSpecification {
  bomFormat: BOMFormat;
  specVersion: CycloneDXSpecificationVersion;
  serialNumber?: BOMSerialNumber;
  version?: BOMVersion;
  metadata?: BOMMetadata;
  components?: Components1;
  services?: Services;
  externalReferences?: ExternalReferences2;
  dependencies?: Dependencies;
  [k: string]: unknown;
}
/**
 * Provides additional information about a BOM.
 */
export interface BOMMetadata {
  timestamp?: Timestamp;
  tools?: CreationTools;
  authors?: Authors;
  component?: Component;
  manufacture?: Manufacture;
  supplier?: Supplier;
  [k: string]: unknown;
}
/**
 * The tool used to create the BOM.
 */
export interface Tool {
  vendor?: ToolVendor;
  name?: ToolName;
  version?: ToolVersion;
  hashes?: Hashes;
  [k: string]: unknown;
}
export interface HashObjects {
  alg: HashAlgorithm;
  content: HashContentValue;
  [k: string]: unknown;
}
export interface OrganizationalContactObject {
  name?: Name;
  email?: EmailAddress;
  phone?: Phone;
  [k: string]: unknown;
}
/**
 * The component that the BOM describes.
 */
export interface Component {
  type: ComponentType;
  "mime-type"?: MimeType;
  "bom-ref"?: BOMReference;
  supplier?: ComponentSupplier;
  author?: ComponentAuthor;
  publisher?: ComponentPublisher;
  group?: ComponentGroup;
  name: ComponentName;
  version: ComponentVersion;
  description?: ComponentDescription;
  scope?: ComponentScope;
  hashes?: ComponentHashes;
  licenses?: ComponentLicenseS;
  copyright?: ComponentCopyright;
  cpe?: ComponentCommonPlatformEnumerationCPE;
  purl?: ComponentPackageURLPurl;
  swid?: SWIDTag;
  modified?: ComponentModifiedFromOriginal;
  pedigree?: ComponentPedigree;
  externalReferences?: ExternalReferences;
  components?: Components;
  [k: string]: unknown;
}
/**
 *  The organization that supplied the component. The supplier may often be the manufacture, but may also be a distributor or repackager.
 */
export interface ComponentSupplier {
  name?: Name1;
  url?: URL;
  contact?: Contact;
  [k: string]: unknown;
}
/**
 * Specifies metadata and content for ISO-IEC 19770-2 Software Identification (SWID) Tags.
 */
export interface SWIDTag {
  tagId: TagID;
  name: Name2;
  version?: Version;
  tagVersion?: TagVersion;
  patch?: Patch;
  text?: AttachmentText;
  url?: URL1;
  [k: string]: unknown;
}
/**
 * Specifies the metadata and content of the SWID tag.
 */
export interface AttachmentText {
  contentType?: ContentType;
  encoding?: Encoding;
  content: AttachmentText1;
  [k: string]: unknown;
}
/**
 * Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc. Pedigree supports viewing this complex chain from the beginning, the end, or anywhere in the middle. It also provides a way to document variants where the exact relation may not be known.
 */
export interface ComponentPedigree {
  ancestors?: Ancestors;
  descendants?: Descendants;
  variants?: Variants;
  commits?: Commits;
  patches?: Patches;
  notes?: Notes;
  [k: string]: unknown;
}
export interface ComponentObject {
  type: ComponentType;
  "mime-type"?: MimeType;
  "bom-ref"?: BOMReference;
  supplier?: ComponentSupplier;
  author?: ComponentAuthor;
  publisher?: ComponentPublisher;
  group?: ComponentGroup;
  name: ComponentName;
  version: ComponentVersion;
  description?: ComponentDescription;
  scope?: ComponentScope;
  hashes?: ComponentHashes;
  licenses?: ComponentLicenseS;
  copyright?: ComponentCopyright;
  cpe?: ComponentCommonPlatformEnumerationCPE;
  purl?: ComponentPackageURLPurl;
  swid?: SWIDTag;
  modified?: ComponentModifiedFromOriginal;
  pedigree?: ComponentPedigree;
  externalReferences?: ExternalReferences;
  components?: Components;
  [k: string]: unknown;
}
/**
 * Specifies an individual external reference
 */
export interface ExternalReference {
  url: URL2;
  comment?: Comment;
  type: Type;
  [k: string]: unknown;
}
/**
 * Specifies an individual commit
 */
export interface Commit {
  uid?: UID;
  url?: URL3;
  author?: Author;
  committer?: Committer;
  message?: Message;
  [k: string]: unknown;
}
/**
 * The author who created the changes in the commit
 */
export interface Author {
  timestamp?: Timestamp1;
  name?: Name3;
  email?: EMail;
  [k: string]: unknown;
}
/**
 * The person who committed or pushed the commit
 */
export interface Committer {
  timestamp?: Timestamp1;
  name?: Name3;
  email?: EMail;
  [k: string]: unknown;
}
/**
 * Specifies an individual patch
 */
export interface Patch1 {
  type: Type1;
  diff?: Diff;
  resolves?: Resolves;
  [k: string]: unknown;
}
/**
 * The patch file (or diff) that show changes. Refer to https://en.wikipedia.org/wiki/Diff
 */
export interface Diff {
  text?: DiffText;
  url?: URL4;
  [k: string]: unknown;
}
/**
 * Specifies the optional text of the diff
 */
export interface DiffText {
  contentType?: ContentType;
  encoding?: Encoding;
  content: AttachmentText1;
  [k: string]: unknown;
}
/**
 * The patch file (or diff) that show changes. Refer to https://en.wikipedia.org/wiki/Diff
 */
export interface Diff1 {
  type: Type2;
  id?: ID;
  name?: Name4;
  description?: Description;
  source?: Source;
  references?: References;
  [k: string]: unknown;
}
/**
 * The source of the issue where it is documented
 */
export interface Source {
  name?: Name5;
  url?: URL5;
  [k: string]: unknown;
}
/**
 * The organization that manufactured the component that the BOM describes.
 */
export interface Manufacture {
  name?: Name1;
  url?: URL;
  contact?: Contact;
  [k: string]: unknown;
}
/**
 *  The organization that supplied the component that the BOM describes. The supplier may often be the manufacture, but may also be a distributor or repackager.
 */
export interface Supplier {
  name?: Name1;
  url?: URL;
  contact?: Contact;
  [k: string]: unknown;
}
export interface ServiceObject {
  "bom-ref"?: BOMReference1;
  provider?: Provider;
  group?: ServiceGroup;
  name: ServiceName;
  version?: ServiceVersion;
  description?: ServiceDescription;
  endpoints?: Endpoints;
  authenticated?: AuthenticationRequired;
  "x-trust-boundary"?: CrossesTrustBoundary;
  data?: DataClassification;
  licenses?: ComponentLicenseS1;
  externalReferences?: ExternalReferences1;
  services?: Services1;
  [k: string]: unknown;
}
/**
 * The organization that provides the service.
 */
export interface Provider {
  name?: Name1;
  url?: URL;
  contact?: Contact;
  [k: string]: unknown;
}
export interface HashObjects1 {
  flow: DataFlowDirection;
  classification: string;
  [k: string]: unknown;
}
/**
 * Defines the direct dependencies of a component. Components that do not have their own dependencies MUST be declared as empty elements within the graph. Components that are not represented in the dependency graph MAY have unknown dependencies. It is RECOMMENDED that implementations assume this to be opaque and not an indicator of a component being dependency-free.
 */
export interface Dependency {
  ref: Reference;
  dependsOn?: DependsOn;
  [k: string]: unknown;
}
