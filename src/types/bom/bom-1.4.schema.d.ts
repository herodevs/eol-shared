/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Specifies the format of the BOM. This helps to identify the file as CycloneDX since BOMs do not have a filename convention nor does JSON schema support namespaces. This value MUST be "CycloneDX".
 */
export type BOMFormat = "CycloneDX";
/**
 * The version of the CycloneDX specification a BOM conforms to (starting at version 1.2).
 */
export type CycloneDXSpecificationVersion = string;
/**
 * Every BOM generated SHOULD have a unique serial number, even if the contents of the BOM have not changed over time. If specified, the serial number MUST conform to RFC-4122. Use of serial numbers are RECOMMENDED.
 */
export type BOMSerialNumber = string;
/**
 * Whenever an existing BOM is modified, either manually or through automated processes, the version of the BOM SHOULD be incremented by 1. When a system is presented with multiple BOMs with identical serial numbers, the system SHOULD use the most recent version of the BOM. The default version is '1'.
 */
export type BOMVersion = number;
/**
 * The date and time (timestamp) when the BOM was created.
 */
export type Timestamp = string;
/**
 * The name of the vendor who created the tool
 */
export type ToolVendor = string;
/**
 * The name of the tool
 */
export type ToolName = string;
/**
 * The version of the tool
 */
export type ToolVersion = string;
export type HashAlgorithm =
  | "MD5"
  | "SHA-1"
  | "SHA-256"
  | "SHA-384"
  | "SHA-512"
  | "SHA3-256"
  | "SHA3-384"
  | "SHA3-512"
  | "BLAKE2b-256"
  | "BLAKE2b-384"
  | "BLAKE2b-512"
  | "BLAKE3";
export type HashContentValue = string;
/**
 * The hashes of the tool (if applicable).
 */
export type Hashes = HashObjects[];
/**
 * The URL to the external reference
 */
export type URL = string;
/**
 * An optional comment describing the external reference
 */
export type Comment = string;
/**
 * Specifies the type of external reference. There are built-in types to describe common references. If a type does not exist for the reference being referred to, use the "other" type.
 */
export type Type =
  | "vcs"
  | "issue-tracker"
  | "website"
  | "advisories"
  | "bom"
  | "mailing-list"
  | "social"
  | "chat"
  | "documentation"
  | "support"
  | "distribution"
  | "license"
  | "build-meta"
  | "build-system"
  | "release-notes"
  | "other";
/**
 * The hashes of the external reference (if applicable).
 */
export type Hashes1 = HashObjects[];
/**
 * External references provide a way to document systems, sites, and information that may be relevant but which are not included with the BOM.
 */
export type ExternalReferences = ExternalReference[];
/**
 * The tool(s) used in the creation of the BOM.
 */
export type CreationTools = Tool[];
/**
 * The name of a contact
 */
export type Name = string;
/**
 * The email address of the contact.
 */
export type EmailAddress = string;
/**
 * The phone number of the contact.
 */
export type Phone = string;
/**
 * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
 */
export type Authors = OrganizationalContactObject[];
/**
 * Specifies the type of component. For software components, classify as application if no more specific appropriate classification is available or cannot be determined for the component. Types include:
 *
 * * __application__ = A software application. Refer to [https://en.wikipedia.org/wiki/Application_software](https://en.wikipedia.org/wiki/Application_software) for information about applications.
 * * __framework__ = A software framework. Refer to [https://en.wikipedia.org/wiki/Software_framework](https://en.wikipedia.org/wiki/Software_framework) for information on how frameworks vary slightly from libraries.
 * * __library__ = A software library. Refer to [https://en.wikipedia.org/wiki/Library_(computing)](https://en.wikipedia.org/wiki/Library_(computing))
 *  for information about libraries. All third-party and open source reusable components will likely be a library. If the library also has key features of a framework, then it should be classified as a framework. If not, or is unknown, then specifying library is RECOMMENDED.
 * * __container__ = A packaging and/or runtime format, not specific to any particular technology, which isolates software inside the container from software outside of a container through virtualization technology. Refer to [https://en.wikipedia.org/wiki/OS-level_virtualization](https://en.wikipedia.org/wiki/OS-level_virtualization)
 * * __operating-system__ = A software operating system without regard to deployment model (i.e. installed on physical hardware, virtual machine, image, etc) Refer to [https://en.wikipedia.org/wiki/Operating_system](https://en.wikipedia.org/wiki/Operating_system)
 * * __device__ = A hardware device such as a processor, or chip-set. A hardware device containing firmware SHOULD include a component for the physical hardware itself, and another component of type 'firmware' or 'operating-system' (whichever is relevant), describing information about the software running on the device.
 *   See also the list of [known device properties](https://github.com/CycloneDX/cyclonedx-property-taxonomy/blob/main/cdx/device.md).
 * * __firmware__ = A special type of software that provides low-level control over a devices hardware. Refer to [https://en.wikipedia.org/wiki/Firmware](https://en.wikipedia.org/wiki/Firmware)
 * * __file__ = A computer file. Refer to [https://en.wikipedia.org/wiki/Computer_file](https://en.wikipedia.org/wiki/Computer_file) for information about files.
 */
export type ComponentType =
  | "application"
  | "framework"
  | "library"
  | "container"
  | "operating-system"
  | "device"
  | "firmware"
  | "file";
/**
 * The optional mime-type of the component. When used on file components, the mime-type can provide additional context about the kind of file being represented such as an image, font, or executable. Some library or framework components may also have an associated mime-type.
 */
export type MimeType = string;
/**
 * An optional identifier which can be used to reference the component elsewhere in the BOM. Every bom-ref MUST be unique within the BOM.
 */
export type BOMReference = string;
/**
 * The name of the organization
 */
export type Name1 = string;
/**
 * The URL of the organization. Multiple URLs are allowed.
 */
export type URL1 = string[];
/**
 * A contact at the organization. Multiple contacts are allowed.
 */
export type Contact = OrganizationalContactObject[];
/**
 * The person(s) or organization(s) that authored the component
 */
export type ComponentAuthor = string;
/**
 * The person(s) or organization(s) that published the component
 */
export type ComponentPublisher = string;
/**
 * The grouping name or identifier. This will often be a shortened, single name of the company or project that produced the component, or the source package or domain name. Whitespace and special characters should be avoided. Examples include: apache, org.apache.commons, and apache.org.
 */
export type ComponentGroup = string;
/**
 * The name of the component. This will often be a shortened, single name of the component. Examples: commons-lang3 and jquery
 */
export type ComponentName = string;
/**
 * The component version. The version should ideally comply with semantic versioning but is not enforced.
 */
export type ComponentVersion = string;
/**
 * Specifies a description for the component
 */
export type ComponentDescription = string;
/**
 * Specifies the scope of the component. If scope is not specified, 'required' scope SHOULD be assumed by the consumer of the BOM.
 */
export type ComponentScope = "required" | "optional" | "excluded";
export type ComponentHashes = HashObjects[];
export type LicenseS = {
  [k: string]: unknown;
};
export type ComponentLicenseS = LicenseS[];
/**
 * A copyright notice informing users of the underlying claims to copyright ownership in a published work.
 */
export type ComponentCopyright = string;
/**
 * Specifies a well-formed CPE name that conforms to the CPE 2.2 or 2.3 specification. See [https://nvd.nist.gov/products/cpe](https://nvd.nist.gov/products/cpe)
 */
export type ComponentCommonPlatformEnumerationCPE = string;
/**
 * Specifies the package-url (purl). The purl, if specified, MUST be valid and conform to the specification defined at: [https://github.com/package-url/purl-spec](https://github.com/package-url/purl-spec)
 */
export type ComponentPackageURLPurl = string;
/**
 * Maps to the tagId of a SoftwareIdentity.
 */
export type TagID = string;
/**
 * Maps to the name of a SoftwareIdentity.
 */
export type Name2 = string;
/**
 * Maps to the version of a SoftwareIdentity.
 */
export type Version = string;
/**
 * Maps to the tagVersion of a SoftwareIdentity.
 */
export type TagVersion = number;
/**
 * Maps to the patch of a SoftwareIdentity.
 */
export type Patch = boolean;
/**
 * Specifies the content type of the text. Defaults to text/plain if not specified.
 */
export type ContentType = string;
/**
 * Specifies the optional encoding the text is represented in.
 */
export type Encoding = "base64";
/**
 * The attachment data. Proactive controls such as input validation and sanitization should be employed to prevent misuse of attachment text.
 */
export type AttachmentText1 = string;
/**
 * The URL to the SWID file.
 */
export type URL2 = string;
/**
 * [Deprecated] - DO NOT USE. This will be removed in a future version. Use the pedigree element instead to supply information on exactly how the component was modified. A boolean value indicating if the component has been modified from the original. A value of true indicates the component is a derivative of the original. A value of false indicates the component has not been modified from the original.
 */
export type ComponentModifiedFromOriginal = boolean;
/**
 * External references provide a way to document systems, sites, and information that may be relevant but which are not included with the BOM.
 */
export type ExternalReferences1 = ExternalReference[];
/**
 * A list of software and hardware components included in the parent component. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system &#8594; subsystem &#8594; parts assembly in physical supply chains.
 */
export type Components = ComponentObject[];
export type ComponentLicenseS1 = LicenseS[];
export type CopyrightText = string;
export type Copyright = Copyright1[];
/**
 * The software versioning type the release note describes.
 */
export type Type1 = string;
/**
 * The title of the release.
 */
export type Title = string;
/**
 * The URL to an image that may be prominently displayed with the release note.
 */
export type FeaturedImage = string;
/**
 * The URL to an image that may be used in messaging on social media platforms.
 */
export type SocialImage = string;
/**
 * A short description of the release.
 */
export type Description = string;
/**
 * The date and time (timestamp) when the release note was created.
 */
export type Timestamp1 = string;
/**
 * One or more alternate names the release may be referred to. This may include unofficial terms used by development and marketing teams (e.g. code names).
 */
export type Aliases = string[];
/**
 * One or more tags that may aid in search or retrieval of the release note.
 */
export type Tags = string[];
/**
 * Specifies the type of issue
 */
export type Type2 = "defect" | "enhancement" | "security";
/**
 * The identifier of the issue assigned by the source of the issue
 */
export type ID = string;
/**
 * The name of the issue
 */
export type Name3 = string;
/**
 * A description of the issue
 */
export type Description1 = string;
/**
 * The name of the source. For example 'National Vulnerability Database', 'NVD', and 'Apache'
 */
export type Name4 = string;
/**
 * The url of the issue documentation as provided by the source
 */
export type URL3 = string;
/**
 * A collection of URL's for reference. Multiple URLs are allowed.
 */
export type References = string[];
/**
 * A collection of issues that have been resolved.
 */
export type Resolves = Diff[];
/**
 * The ISO-639 (or higher) language code and optional ISO-3166 (or higher) country code. Examples include: "en", "en-US", "fr" and "fr-CA"
 */
export type Locale = string;
/**
 * Zero or more release notes containing the locale and content. Multiple note objects may be specified to support release notes in a wide variety of languages.
 */
export type Notes = Note[];
/**
 * The name of the property. Duplicate names are allowed, each potentially having a different value.
 */
export type Name5 = string;
/**
 * The value of the property.
 */
export type Value = string;
/**
 * Provides the ability to document properties in a name-value store. This provides flexibility to include data not officially supported in the standard without having to use additional namespaces or create extensions. Unlike key-value stores, properties support duplicate names, each potentially having different values. Property names of interest to the general public are encouraged to be registered in the [CycloneDX Property Taxonomy](https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal registration is OPTIONAL.
 */
export type Properties = LightweightNameValuePair[];
/**
 * Provides the ability to document properties in a name-value store. This provides flexibility to include data not officially supported in the standard without having to use additional namespaces or create extensions. Unlike key-value stores, properties support duplicate names, each potentially having different values. Property names of interest to the general public are encouraged to be registered in the [CycloneDX Property Taxonomy](https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal registration is OPTIONAL.
 */
export type Properties1 = LightweightNameValuePair[];
/**
 * Enveloped signature in [JSON Signature Format (JSF)](https://cyberphone.github.io/doc/security/jsf.html).
 */
export type Signature =
  | {
      signers?: Signature1;
    }
  | {
      chain?: Signature4;
    }
  | Signature5;
/**
 * Signature algorithm. The currently recognized JWA [RFC7518] and RFC8037 [RFC8037] asymmetric key algorithms. Note: Unlike RFC8037 [RFC8037] JSF requires explicit Ed* algorithm names instead of "EdDSA".
 */
export type Algorithm =
  | "RS256"
  | "RS384"
  | "RS512"
  | "PS256"
  | "PS384"
  | "PS512"
  | "ES256"
  | "ES384"
  | "ES512"
  | "Ed25519"
  | "Ed448"
  | "HS256"
  | "HS384"
  | "HS512";
/**
 * Signature algorithm. Note: If proprietary signature algorithms are added, they must be expressed as URIs.
 */
export type Algorithm1 = string;
/**
 * Optional. Application specific string identifying the signature key.
 */
export type KeyID = string;
/**
 * Optional. Public key object.
 */
export type PublicKey = {
  [k: string]: unknown;
};
/**
 * Optional. Sorted array of X.509 [RFC5280] certificates, where the first element must contain the signature certificate. The certificate path must be contiguous but is not required to be complete.
 */
export type CertificatePath = string[];
/**
 * Optional. Array holding the names of one or more application level properties that must be excluded from the signature process. Note that the "excludes" property itself, must also be excluded from the signature process. Since both the "excludes" property and the associated data it points to are unsigned, a conforming JSF implementation must provide options for specifying which properties to accept.
 */
export type Excludes = string[];
/**
 * The signature data. Note that the binary representation must follow the JWA [RFC7518] specifications.
 */
export type Signature3 = string;
/**
 * Unique top level property for Multiple Signatures. (multisignature)
 */
export type Signature1 = Signature2[];
/**
 * Unique top level property for Signature Chains. (signaturechain)
 */
export type Signature4 = Signature2[];
/**
 * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
 */
export type Ancestors = ComponentObject[];
/**
 * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
 */
export type Descendants = ComponentObject[];
/**
 * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
 */
export type Variants = ComponentObject[];
/**
 * A unique identifier of the commit. This may be version control specific. For example, Subversion uses revision numbers whereas git uses commit hashes.
 */
export type UID = string;
/**
 * The URL to the commit. This URL will typically point to a commit in a version control system.
 */
export type URL4 = string;
/**
 * The timestamp in which the action occurred
 */
export type Timestamp2 = string;
/**
 * The name of the individual who performed the action
 */
export type Name6 = string;
/**
 * The email address of the individual who performed the action
 */
export type EMail = string;
/**
 * The text description of the contents of the commit
 */
export type Message = string;
/**
 * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
 */
export type Commits = Commit[];
/**
 * Specifies the purpose for the patch including the resolution of defects, security issues, or new behavior or functionality.
 *
 * * __unofficial__ = A patch which is not developed by the creators or maintainers of the software being patched. Refer to [https://en.wikipedia.org/wiki/Unofficial_patch](https://en.wikipedia.org/wiki/Unofficial_patch)
 * * __monkey__ = A patch which dynamically modifies runtime behavior. Refer to [https://en.wikipedia.org/wiki/Monkey_patch](https://en.wikipedia.org/wiki/Monkey_patch)
 * * __backport__ = A patch which takes code from a newer version of software and applies it to older versions of the same software. Refer to [https://en.wikipedia.org/wiki/Backporting](https://en.wikipedia.org/wiki/Backporting)
 * * __cherry-pick__ = A patch created by selectively applying commits from other versions or branches of the same software.
 */
export type Type3 = "unofficial" | "monkey" | "backport" | "cherry-pick";
/**
 * Specifies the URL to the diff
 */
export type URL5 = string;
/**
 * A collection of issues the patch resolves
 */
export type Resolves1 = Diff[];
/**
 * >A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
 */
export type Patches = Patch1[];
/**
 * Notes, observations, and other non-structured commentary describing the components pedigree.
 */
export type Notes1 = string;
export type BOMLicenseS = LicenseS[];
/**
 * Provides the ability to document properties in a name-value store. This provides flexibility to include data not officially supported in the standard without having to use additional namespaces or create extensions. Unlike key-value stores, properties support duplicate names, each potentially having different values. Property names of interest to the general public are encouraged to be registered in the [CycloneDX Property Taxonomy](https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal registration is OPTIONAL.
 */
export type Properties2 = LightweightNameValuePair[];
/**
 * A list of software and hardware components.
 */
export type Components1 = ComponentObject[];
/**
 * An optional identifier which can be used to reference the service elsewhere in the BOM. Every bom-ref MUST be unique within the BOM.
 */
export type BOMReference1 = string;
/**
 * The grouping name, namespace, or identifier. This will often be a shortened, single name of the company or project that produced the service or domain name. Whitespace and special characters should be avoided.
 */
export type ServiceGroup = string;
/**
 * The name of the service. This will often be a shortened, single name of the service.
 */
export type ServiceName = string;
/**
 * The service version.
 */
export type ServiceVersion = string;
/**
 * Specifies a description for the service
 */
export type ServiceDescription = string;
/**
 * The endpoint URIs of the service. Multiple endpoints are allowed.
 */
export type Endpoints = string[];
/**
 * A boolean value indicating if the service requires authentication. A value of true indicates the service requires authentication prior to use. A value of false indicates the service does not require authentication.
 */
export type AuthenticationRequired = boolean;
/**
 * A boolean value indicating if use of the service crosses a trust zone or boundary. A value of true indicates that by using the service, a trust boundary is crossed. A value of false indicates that by using the service, a trust boundary is not crossed.
 */
export type CrossesTrustBoundary = boolean;
/**
 * Specifies the flow direction of the data. Direction is relative to the service. Inbound flow states that data enters the service. Outbound flow states that data leaves the service. Bi-directional states that data flows both ways, and unknown states that the direction is not known.
 */
export type DirectionalFlow = "inbound" | "outbound" | "bi-directional" | "unknown";
/**
 * Data classification tags data according to its type, sensitivity, and value if altered, stolen, or destroyed.
 */
export type Classification = string;
/**
 * Specifies the data classification.
 */
export type DataClassification = HashObjects1[];
export type ComponentLicenseS2 = LicenseS[];
/**
 * External references provide a way to document systems, sites, and information that may be relevant but which are not included with the BOM.
 */
export type ExternalReferences2 = ExternalReference[];
/**
 * A list of services included or deployed behind the parent service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies.
 */
export type Services1 = ServiceObject[];
/**
 * Provides the ability to document properties in a name-value store. This provides flexibility to include data not officially supported in the standard without having to use additional namespaces or create extensions. Unlike key-value stores, properties support duplicate names, each potentially having different values. Property names of interest to the general public are encouraged to be registered in the [CycloneDX Property Taxonomy](https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal registration is OPTIONAL.
 */
export type Properties3 = LightweightNameValuePair[];
/**
 * Enveloped signature in [JSON Signature Format (JSF)](https://cyberphone.github.io/doc/security/jsf.html).
 */
export type Signature6 =
  | {
      signers?: Signature1;
    }
  | {
      chain?: Signature4;
    }
  | Signature5;
/**
 * A list of services. This may include microservices, function-as-a-service, and other types of network or intra-process services.
 */
export type Services = ServiceObject[];
/**
 * External references provide a way to document systems, sites, and information that may be relevant but which are not included with the BOM.
 */
export type ExternalReferences3 = ExternalReference[];
/**
 * References a component by the components bom-ref attribute
 */
export type Reference = string;
export type RefType = string;
/**
 * The bom-ref identifiers of the components that are dependencies of this dependency object.
 */
export type DependsOn = RefType[];
/**
 * Provides the ability to document dependency relationships.
 */
export type Dependencies = Dependency[];
/**
 * Specifies an aggregate type that describe how complete a relationship is.
 */
export type Aggregate =
  | "complete"
  | "incomplete"
  | "incomplete_first_party_only"
  | "incomplete_third_party_only"
  | "unknown"
  | "not_specified";
/**
 * The bom-ref identifiers of the components or services being described. Assemblies refer to nested relationships whereby a constituent part may include other constituent parts. References do not cascade to child parts. References are explicit for the specified constituent part only.
 */
export type BOMReferences = string[];
/**
 * The bom-ref identifiers of the components or services being described. Dependencies refer to a relationship whereby an independent constituent part requires another independent constituent part. References do not cascade to transitive dependencies. References are explicit for the specified dependency only.
 */
export type BOMReferences1 = string[];
/**
 * Enveloped signature in [JSON Signature Format (JSF)](https://cyberphone.github.io/doc/security/jsf.html).
 */
export type Signature7 =
  | {
      signers?: Signature1;
    }
  | {
      chain?: Signature4;
    }
  | Signature5;
/**
 * Compositions describe constituent parts (including components, services, and dependency relationships) and their completeness.
 */
export type Compositions = Compositions1[];
/**
 * An optional identifier which can be used to reference the vulnerability elsewhere in the BOM. Every bom-ref MUST be unique within the BOM.
 */
export type BOMReference2 = string;
/**
 * The identifier that uniquely identifies the vulnerability.
 */
export type ID1 = string;
/**
 * The url of the vulnerability documentation as provided by the source.
 */
export type URL6 = string;
/**
 * The name of the source.
 */
export type Name7 = string;
/**
 * An identifier that uniquely identifies the vulnerability.
 */
export type ID2 = string;
/**
 * Zero or more pointers to vulnerabilities that are the equivalent of the vulnerability specified. Often times, the same vulnerability may exist in multiple sources of vulnerability intelligence, but have different identifiers. References provide a way to correlate vulnerabilities across multiple sources of vulnerability intelligence.
 */
export type References1 = {
  id: ID2;
  source: Source2;
}[];
/**
 * The numerical score of the rating.
 */
export type Score = number;
/**
 * Textual representation of the severity that corresponds to the numerical score of the rating.
 */
export type Severity = "critical" | "high" | "medium" | "low" | "info" | "none" | "unknown";
/**
 * Specifies the severity or risk scoring methodology or standard used.
 *
 * * CVSSv2 - [Common Vulnerability Scoring System v2](https://www.first.org/cvss/v2/)
 * * CVSSv3 - [Common Vulnerability Scoring System v3](https://www.first.org/cvss/v3-0/)
 * * CVSSv31 - [Common Vulnerability Scoring System v3.1](https://www.first.org/cvss/v3-1/)
 * * OWASP - [OWASP Risk Rating Methodology](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology)
 */
export type Method = "CVSSv2" | "CVSSv3" | "CVSSv31" | "OWASP" | "other";
/**
 * Textual representation of the metric values used to score the vulnerability
 */
export type Vector = string;
/**
 * An optional reason for rating the vulnerability as it was
 */
export type Justification = string;
/**
 * List of vulnerability ratings
 */
export type Ratings = Rating[];
/**
 * Integer representation of a Common Weaknesses Enumerations (CWE). For example 399 (of https://cwe.mitre.org/data/definitions/399.html)
 */
export type CWE = number;
/**
 * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability. For example 399 (of https://cwe.mitre.org/data/definitions/399.html)
 */
export type CWEs = CWE[];
/**
 * A description of the vulnerability as provided by the source.
 */
export type Description2 = string;
/**
 * If available, an in-depth description of the vulnerability as provided by the source organization. Details often include examples, proof-of-concepts, and other information useful in understanding root cause.
 */
export type Details = string;
/**
 * Recommendations of how the vulnerability can be remediated or mitigated.
 */
export type Details1 = string;
/**
 * An optional name of the advisory.
 */
export type Title1 = string;
/**
 * Location where the advisory can be obtained.
 */
export type URL7 = string;
/**
 * Published advisories of the vulnerability if provided.
 */
export type Advisories = Advisory[];
/**
 * The date and time (timestamp) when the vulnerability record was created in the vulnerability database.
 */
export type Created = string;
/**
 * The date and time (timestamp) when the vulnerability record was first published.
 */
export type Published = string;
/**
 * The date and time (timestamp) when the vulnerability record was last updated.
 */
export type Updated = string;
/**
 * The organizations credited with vulnerability discovery.
 */
export type Organizations = OrganizationalEntityObject[];
/**
 * The individuals, not associated with organizations, that are credited with vulnerability discovery.
 */
export type Individuals = OrganizationalContactObject[];
/**
 * The tool(s) used to identify, confirm, or score the vulnerability.
 */
export type CreationTools1 = Tool[];
/**
 * Declares the current state of an occurrence of a vulnerability, after automated or manual analysis.
 *
 * * __resolved__ = the vulnerability has been remediated.
 * * __resolved\_with\_pedigree__ = the vulnerability has been remediated and evidence of the changes are provided in the affected components pedigree containing verifiable commit history and/or diff(s).
 * * __exploitable__ = the vulnerability may be directly or indirectly exploitable.
 * * __in\_triage__ = the vulnerability is being investigated.
 * * __false\_positive__ = the vulnerability is not specific to the component or service and was falsely identified or associated.
 * * __not\_affected__ = the component or service is not affected by the vulnerability. Justification should be specified for all not_affected cases.
 */
export type ImpactAnalysisState =
  | "resolved"
  | "resolved_with_pedigree"
  | "exploitable"
  | "in_triage"
  | "false_positive"
  | "not_affected";
/**
 * The rationale of why the impact analysis state was asserted.
 *
 * * __code\_not\_present__ = the code has been removed or tree-shaked.
 * * __code\_not\_reachable__ = the vulnerable code is not invoked at runtime.
 * * __requires\_configuration__ = exploitability requires a configurable option to be set/unset.
 * * __requires\_dependency__ = exploitability requires a dependency that is not present.
 * * __requires\_environment__ = exploitability requires a certain environment which is not present.
 * * __protected\_by\_compiler__ = exploitability requires a compiler flag to be set/unset.
 * * __protected\_at\_runtime__ = exploits are prevented at runtime.
 * * __protected\_at\_perimeter__ = attacks are blocked at physical, logical, or network perimeter.
 * * __protected\_by\_mitigating\_control__ = preventative measures have been implemented that reduce the likelihood and/or impact of the vulnerability.
 */
export type ImpactAnalysisJustification =
  | "code_not_present"
  | "code_not_reachable"
  | "requires_configuration"
  | "requires_dependency"
  | "requires_environment"
  | "protected_by_compiler"
  | "protected_at_runtime"
  | "protected_at_perimeter"
  | "protected_by_mitigating_control";
/**
 * A response to the vulnerability by the manufacturer, supplier, or project responsible for the affected component or service. More than one response is allowed. Responses are strongly encouraged for vulnerabilities where the analysis state is exploitable.
 */
export type Response = ("can_not_fix" | "will_not_fix" | "update" | "rollback" | "workaround_available")[];
/**
 * Detailed description of the impact including methods used during assessment. If a vulnerability is not exploitable, this field should include specific details on why the component or service is not impacted by this vulnerability.
 */
export type Detail = string;
/**
 * References a component or service by the objects bom-ref
 */
export type Reference1 = string;
/**
 * Zero or more individual versions or range of versions.
 */
export type Versions = {
  [k: string]: unknown;
}[];
/**
 * The components or services that are affected by the vulnerability.
 */
export type Affects = {
  ref: Reference1;
  versions?: Versions;
}[];
/**
 * Provides the ability to document properties in a name-value store. This provides flexibility to include data not officially supported in the standard without having to use additional namespaces or create extensions. Unlike key-value stores, properties support duplicate names, each potentially having different values. Property names of interest to the general public are encouraged to be registered in the [CycloneDX Property Taxonomy](https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal registration is OPTIONAL.
 */
export type Properties4 = LightweightNameValuePair[];
/**
 * Vulnerabilities identified in components or services.
 */
export type Vulnerabilities = Vulnerability[];
/**
 * Enveloped signature in [JSON Signature Format (JSF)](https://cyberphone.github.io/doc/security/jsf.html).
 */
export type Signature8 =
  | {
      signers?: Signature1;
    }
  | {
      chain?: Signature4;
    }
  | Signature5;

export interface CycloneDXSoftwareBillOfMaterialsStandard {
  $schema?: string;
  bomFormat: BOMFormat;
  specVersion: CycloneDXSpecificationVersion;
  serialNumber?: BOMSerialNumber;
  version?: BOMVersion;
  metadata?: BOMMetadata;
  components?: Components1;
  services?: Services;
  externalReferences?: ExternalReferences3;
  dependencies?: Dependencies;
  compositions?: Compositions;
  vulnerabilities?: Vulnerabilities;
  signature?: Signature8;
}
/**
 * Provides additional information about a BOM.
 */
export interface BOMMetadata {
  timestamp?: Timestamp;
  tools?: CreationTools;
  authors?: Authors;
  component?: Component;
  manufacture?: Manufacture;
  supplier?: Supplier;
  licenses?: BOMLicenseS;
  properties?: Properties2;
}
/**
 * Information about the automated or manual tool used
 */
export interface Tool {
  vendor?: ToolVendor;
  name?: ToolName;
  version?: ToolVersion;
  hashes?: Hashes;
  externalReferences?: ExternalReferences;
}
export interface HashObjects {
  alg: HashAlgorithm;
  content: HashContentValue;
}
/**
 * Specifies an individual external reference
 */
export interface ExternalReference {
  url: URL;
  comment?: Comment;
  type: Type;
  hashes?: Hashes1;
}
export interface OrganizationalContactObject {
  name?: Name;
  email?: EmailAddress;
  phone?: Phone;
}
/**
 * The component that the BOM describes.
 */
export interface Component {
  type: ComponentType;
  "mime-type"?: MimeType;
  "bom-ref"?: BOMReference;
  supplier?: ComponentSupplier;
  author?: ComponentAuthor;
  publisher?: ComponentPublisher;
  group?: ComponentGroup;
  name: ComponentName;
  version?: ComponentVersion;
  description?: ComponentDescription;
  scope?: ComponentScope;
  hashes?: ComponentHashes;
  licenses?: ComponentLicenseS;
  copyright?: ComponentCopyright;
  cpe?: ComponentCommonPlatformEnumerationCPE;
  purl?: ComponentPackageURLPurl;
  swid?: SWIDTag;
  modified?: ComponentModifiedFromOriginal;
  pedigree?: ComponentPedigree;
  externalReferences?: ExternalReferences1;
  components?: Components;
  evidence?: Evidence;
  releaseNotes?: ReleaseNotes;
  properties?: Properties1;
  signature?: Signature;
}
/**
 *  The organization that supplied the component. The supplier may often be the manufacturer, but may also be a distributor or repackager.
 */
export interface ComponentSupplier {
  name?: Name1;
  url?: URL1;
  contact?: Contact;
}
/**
 * Specifies metadata and content for [ISO-IEC 19770-2 Software Identification (SWID) Tags](https://www.iso.org/standard/65666.html).
 */
export interface SWIDTag {
  tagId: TagID;
  name: Name2;
  version?: Version;
  tagVersion?: TagVersion;
  patch?: Patch;
  text?: AttachmentText;
  url?: URL2;
}
/**
 * Specifies the metadata and content of the SWID tag.
 */
export interface AttachmentText {
  contentType?: ContentType;
  encoding?: Encoding;
  content: AttachmentText1;
}
/**
 * Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc. Pedigree supports viewing this complex chain from the beginning, the end, or anywhere in the middle. It also provides a way to document variants where the exact relation may not be known.
 */
export interface ComponentPedigree {
  ancestors?: Ancestors;
  descendants?: Descendants;
  variants?: Variants;
  commits?: Commits;
  patches?: Patches;
  notes?: Notes1;
}
export interface ComponentObject {
  type: ComponentType;
  "mime-type"?: MimeType;
  "bom-ref"?: BOMReference;
  supplier?: ComponentSupplier;
  author?: ComponentAuthor;
  publisher?: ComponentPublisher;
  group?: ComponentGroup;
  name: ComponentName;
  version?: ComponentVersion;
  description?: ComponentDescription;
  scope?: ComponentScope;
  hashes?: ComponentHashes;
  licenses?: ComponentLicenseS;
  copyright?: ComponentCopyright;
  cpe?: ComponentCommonPlatformEnumerationCPE;
  purl?: ComponentPackageURLPurl;
  swid?: SWIDTag;
  modified?: ComponentModifiedFromOriginal;
  pedigree?: ComponentPedigree;
  externalReferences?: ExternalReferences1;
  components?: Components;
  evidence?: Evidence;
  releaseNotes?: ReleaseNotes;
  properties?: Properties1;
  signature?: Signature;
}
/**
 * Provides the ability to document evidence collected through various forms of extraction or analysis.
 */
export interface Evidence {
  licenses?: ComponentLicenseS1;
  copyright?: Copyright;
}
export interface Copyright1 {
  text: CopyrightText;
}
/**
 * Specifies optional release notes.
 */
export interface ReleaseNotes {
  type: Type1;
  title?: Title;
  featuredImage?: FeaturedImage;
  socialImage?: SocialImage;
  description?: Description;
  timestamp?: Timestamp1;
  aliases?: Aliases;
  tags?: Tags;
  resolves?: Resolves;
  notes?: Notes;
  properties?: Properties;
}
/**
 * An individual issue that has been resolved.
 */
export interface Diff {
  type: Type2;
  id?: ID;
  name?: Name3;
  description?: Description1;
  source?: Source;
  references?: References;
}
/**
 * The source of the issue where it is documented
 */
export interface Source {
  name?: Name4;
  url?: URL3;
}
/**
 * A note containing the locale and content.
 */
export interface Note {
  locale?: Locale;
  text: ReleaseNoteContent;
}
/**
 * Specifies the full content of the release note.
 */
export interface ReleaseNoteContent {
  contentType?: ContentType;
  encoding?: Encoding;
  content: AttachmentText1;
}
export interface LightweightNameValuePair {
  name?: Name5;
  value?: Value;
  [k: string]: unknown;
}
export interface Signature2 {
  algorithm: Algorithm | Algorithm1;
  keyId?: KeyID;
  publicKey?: PublicKey;
  certificatePath?: CertificatePath;
  excludes?: Excludes;
  value: Signature3;
}
/**
 * Unique top level property for simple signatures. (signaturecore)
 */
export interface Signature5 {
  algorithm: Algorithm | Algorithm1;
  keyId?: KeyID;
  publicKey?: PublicKey;
  certificatePath?: CertificatePath;
  excludes?: Excludes;
  value: Signature3;
}
/**
 * Specifies an individual commit
 */
export interface Commit {
  uid?: UID;
  url?: URL4;
  author?: Author;
  committer?: Committer;
  message?: Message;
}
/**
 * The author who created the changes in the commit
 */
export interface Author {
  timestamp?: Timestamp2;
  name?: Name6;
  email?: EMail;
}
/**
 * The person who committed or pushed the commit
 */
export interface Committer {
  timestamp?: Timestamp2;
  name?: Name6;
  email?: EMail;
}
/**
 * Specifies an individual patch
 */
export interface Patch1 {
  type: Type3;
  diff?: Diff1;
  resolves?: Resolves1;
}
/**
 * The patch file (or diff) that show changes. Refer to [https://en.wikipedia.org/wiki/Diff](https://en.wikipedia.org/wiki/Diff)
 */
export interface Diff1 {
  text?: DiffText;
  url?: URL5;
}
/**
 * Specifies the optional text of the diff
 */
export interface DiffText {
  contentType?: ContentType;
  encoding?: Encoding;
  content: AttachmentText1;
}
/**
 * The organization that manufactured the component that the BOM describes.
 */
export interface Manufacture {
  name?: Name1;
  url?: URL1;
  contact?: Contact;
}
/**
 *  The organization that supplied the component that the BOM describes. The supplier may often be the manufacturer, but may also be a distributor or repackager.
 */
export interface Supplier {
  name?: Name1;
  url?: URL1;
  contact?: Contact;
}
export interface ServiceObject {
  "bom-ref"?: BOMReference1;
  provider?: Provider;
  group?: ServiceGroup;
  name: ServiceName;
  version?: ServiceVersion;
  description?: ServiceDescription;
  endpoints?: Endpoints;
  authenticated?: AuthenticationRequired;
  "x-trust-boundary"?: CrossesTrustBoundary;
  data?: DataClassification;
  licenses?: ComponentLicenseS2;
  externalReferences?: ExternalReferences2;
  services?: Services1;
  releaseNotes?: ReleaseNotes1;
  properties?: Properties3;
  signature?: Signature6;
}
/**
 * The organization that provides the service.
 */
export interface Provider {
  name?: Name1;
  url?: URL1;
  contact?: Contact;
}
export interface HashObjects1 {
  flow: DirectionalFlow;
  classification: Classification;
}
/**
 * Specifies optional release notes.
 */
export interface ReleaseNotes1 {
  type: Type1;
  title?: Title;
  featuredImage?: FeaturedImage;
  socialImage?: SocialImage;
  description?: Description;
  timestamp?: Timestamp1;
  aliases?: Aliases;
  tags?: Tags;
  resolves?: Resolves;
  notes?: Notes;
  properties?: Properties;
}
/**
 * Defines the direct dependencies of a component. Components that do not have their own dependencies MUST be declared as empty elements within the graph. Components that are not represented in the dependency graph MAY have unknown dependencies. It is RECOMMENDED that implementations assume this to be opaque and not an indicator of a component being dependency-free.
 */
export interface Dependency {
  ref: Reference;
  dependsOn?: DependsOn;
}
export interface Compositions1 {
  aggregate: Aggregate;
  assemblies?: BOMReferences;
  dependencies?: BOMReferences1;
  signature?: Signature7;
}
/**
 * Defines a weakness in an component or service that could be exploited or triggered by a threat source.
 */
export interface Vulnerability {
  "bom-ref"?: BOMReference2;
  id?: ID1;
  source?: Source1;
  references?: References1;
  ratings?: Ratings;
  cwes?: CWEs;
  description?: Description2;
  detail?: Details;
  recommendation?: Details1;
  advisories?: Advisories;
  created?: Created;
  published?: Published;
  updated?: Updated;
  credits?: Credits;
  tools?: CreationTools1;
  analysis?: ImpactAnalysis;
  affects?: Affects;
  properties?: Properties4;
}
/**
 * The source that published the vulnerability.
 */
export interface Source1 {
  url?: URL6;
  name?: Name7;
}
/**
 * The source that published the vulnerability.
 */
export interface Source2 {
  url?: URL6;
  name?: Name7;
}
/**
 * Defines the severity or risk ratings of a vulnerability.
 */
export interface Rating {
  source?: Source3;
  score?: Score;
  severity?: Severity;
  method?: Method;
  vector?: Vector;
  justification?: Justification;
}
/**
 * The source that calculated the severity or risk rating of the vulnerability.
 */
export interface Source3 {
  url?: URL6;
  name?: Name7;
}
/**
 * Title and location where advisory information can be obtained. An advisory is a notification of a threat to a component, service, or system.
 */
export interface Advisory {
  title?: Title1;
  url: URL7;
}
/**
 * Individuals or organizations credited with the discovery of the vulnerability.
 */
export interface Credits {
  organizations?: Organizations;
  individuals?: Individuals;
}
export interface OrganizationalEntityObject {
  name?: Name1;
  url?: URL1;
  contact?: Contact;
}
/**
 * An assessment of the impact and exploitability of the vulnerability.
 */
export interface ImpactAnalysis {
  state?: ImpactAnalysisState;
  justification?: ImpactAnalysisJustification;
  response?: Response;
  detail?: Detail;
}
