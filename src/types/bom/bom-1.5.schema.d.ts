/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Specifies the format of the BOM. This helps to identify the file as CycloneDX since BOMs do not have a filename convention nor does JSON schema support namespaces. This value MUST be "CycloneDX".
 */
export type BOMFormat = "CycloneDX";
/**
 * The version of the CycloneDX specification a BOM conforms to (starting at version 1.2).
 */
export type CycloneDXSpecificationVersion = string;
/**
 * Every BOM generated SHOULD have a unique serial number, even if the contents of the BOM have not changed over time. If specified, the serial number MUST conform to RFC-4122. Use of serial numbers are RECOMMENDED.
 */
export type BOMSerialNumber = string;
/**
 * Whenever an existing BOM is modified, either manually or through automated processes, the version of the BOM SHOULD be incremented by 1. When a system is presented with multiple BOMs with identical serial numbers, the system SHOULD use the most recent version of the BOM. The default version is '1'.
 */
export type BOMVersion = number;
/**
 * The date and time (timestamp) when the BOM was created.
 */
export type Timestamp = string;
/**
 * The product lifecycle(s) that this BOM represents.
 */
export type Lifecycle =
  | {
      phase: Phase;
    }
  | {
      name: Name;
      description?: Description;
    };
/**
 * A pre-defined phase in the product lifecycle.
 *
 * * __design__ = BOM produced early in the development lifecycle containing inventory of components and services that are proposed or planned to be used. The inventory may need to be procured, retrieved, or resourced prior to use.
 * * __pre-build__ = BOM consisting of information obtained prior to a build process and may contain source files and development artifacts and manifests. The inventory may need to be resolved and retrieved prior to use.
 * * __build__ = BOM consisting of information obtained during a build process where component inventory is available for use. The precise versions of resolved components are usually available at this time as well as the provenance of where the components were retrieved from.
 * * __post-build__ = BOM consisting of information obtained after a build process has completed and the resulting components(s) are available for further analysis. Built components may exist as the result of a CI/CD process, may have been installed or deployed to a system or device, and may need to be retrieved or extracted from the system or device.
 * * __operations__ = BOM produced that represents inventory that is running and operational. This may include staging or production environments and will generally encompass multiple SBOMs describing the applications and operating system, along with HBOMs describing the hardware that makes up the system. Operations Bill of Materials (OBOM) can provide full-stack inventory of runtime environments, configurations, and additional dependencies.
 * * __discovery__ = BOM consisting of information observed through network discovery providing point-in-time enumeration of embedded, on-premise, and cloud-native services such as server applications, connected devices, microservices, and serverless functions.
 * * __decommission__ = BOM containing inventory that will be, or has been retired from operations.
 */
export type Phase = "design" | "pre-build" | "build" | "post-build" | "operations" | "discovery" | "decommission";
/**
 * The name of the lifecycle phase
 */
export type Name = string;
/**
 * The description of the lifecycle phase
 */
export type Description = string;
export type Lifecycles = Lifecycle[];
/**
 * Specifies the type of component. For software components, classify as application if no more specific appropriate classification is available or cannot be determined for the component. Types include:
 *
 * * __application__ = A software application. Refer to [https://en.wikipedia.org/wiki/Application_software](https://en.wikipedia.org/wiki/Application_software) for information about applications.
 * * __framework__ = A software framework. Refer to [https://en.wikipedia.org/wiki/Software_framework](https://en.wikipedia.org/wiki/Software_framework) for information on how frameworks vary slightly from libraries.
 * * __library__ = A software library. Refer to [https://en.wikipedia.org/wiki/Library_(computing)](https://en.wikipedia.org/wiki/Library_(computing))
 *  for information about libraries. All third-party and open source reusable components will likely be a library. If the library also has key features of a framework, then it should be classified as a framework. If not, or is unknown, then specifying library is RECOMMENDED.
 * * __container__ = A packaging and/or runtime format, not specific to any particular technology, which isolates software inside the container from software outside of a container through virtualization technology. Refer to [https://en.wikipedia.org/wiki/OS-level_virtualization](https://en.wikipedia.org/wiki/OS-level_virtualization)
 * * __platform__ = A runtime environment which interprets or executes software. This may include runtimes such as those that execute bytecode or low-code/no-code application platforms.
 * * __operating-system__ = A software operating system without regard to deployment model (i.e. installed on physical hardware, virtual machine, image, etc) Refer to [https://en.wikipedia.org/wiki/Operating_system](https://en.wikipedia.org/wiki/Operating_system)
 * * __device__ = A hardware device such as a processor, or chip-set. A hardware device containing firmware SHOULD include a component for the physical hardware itself, and another component of type 'firmware' or 'operating-system' (whichever is relevant), describing information about the software running on the device.
 *   See also the list of [known device properties](https://github.com/CycloneDX/cyclonedx-property-taxonomy/blob/main/cdx/device.md).
 * * __device-driver__ = A special type of software that operates or controls a particular type of device. Refer to [https://en.wikipedia.org/wiki/Device_driver](https://en.wikipedia.org/wiki/Device_driver)
 * * __firmware__ = A special type of software that provides low-level control over a devices hardware. Refer to [https://en.wikipedia.org/wiki/Firmware](https://en.wikipedia.org/wiki/Firmware)
 * * __file__ = A computer file. Refer to [https://en.wikipedia.org/wiki/Computer_file](https://en.wikipedia.org/wiki/Computer_file) for information about files.
 * * __machine-learning-model__ = A model based on training data that can make predictions or decisions without being explicitly programmed to do so.
 * * __data__ = A collection of discrete values that convey information.
 */
export type ComponentType =
  | "application"
  | "framework"
  | "library"
  | "container"
  | "platform"
  | "operating-system"
  | "device"
  | "device-driver"
  | "firmware"
  | "file"
  | "machine-learning-model"
  | "data";
/**
 * The optional mime-type of the component. When used on file components, the mime-type can provide additional context about the kind of file being represented such as an image, font, or executable. Some library or framework components may also have an associated mime-type.
 */
export type MimeType = string;
/**
 * An optional identifier which can be used to reference the component elsewhere in the BOM. Every bom-ref MUST be unique within the BOM.
 */
export type BOMReference = string;
/**
 * An optional identifier which can be used to reference the object elsewhere in the BOM. Every bom-ref MUST be unique within the BOM.
 */
export type BOMReference1 = string;
/**
 * The name of the organization
 */
export type Name1 = string;
/**
 * The URL of the organization. Multiple URLs are allowed.
 */
export type URL = string[];
/**
 * An optional identifier which can be used to reference the object elsewhere in the BOM. Every bom-ref MUST be unique within the BOM.
 */
export type BOMReference2 = string;
/**
 * The name of a contact
 */
export type Name2 = string;
/**
 * The email address of the contact.
 */
export type EmailAddress = string;
/**
 * The phone number of the contact.
 */
export type Phone = string;
/**
 * A contact at the organization. Multiple contacts are allowed.
 */
export type Contact = OrganizationalContactObject[];
/**
 * The person(s) or organization(s) that authored the component
 */
export type ComponentAuthor = string;
/**
 * The person(s) or organization(s) that published the component
 */
export type ComponentPublisher = string;
/**
 * The grouping name or identifier. This will often be a shortened, single name of the company or project that produced the component, or the source package or domain name. Whitespace and special characters should be avoided. Examples include: apache, org.apache.commons, and apache.org.
 */
export type ComponentGroup = string;
/**
 * The name of the component. This will often be a shortened, single name of the component. Examples: commons-lang3 and jquery
 */
export type ComponentName = string;
/**
 * The component version. The version should ideally comply with semantic versioning but is not enforced.
 */
export type ComponentVersion = string;
/**
 * Specifies a description for the component
 */
export type ComponentDescription = string;
/**
 * Specifies the scope of the component. If scope is not specified, 'required' scope SHOULD be assumed by the consumer of the BOM.
 */
export type ComponentScope = "required" | "optional" | "excluded";
export type HashAlgorithm =
  | "MD5"
  | "SHA-1"
  | "SHA-256"
  | "SHA-384"
  | "SHA-512"
  | "SHA3-256"
  | "SHA3-384"
  | "SHA3-512"
  | "BLAKE2b-256"
  | "BLAKE2b-384"
  | "BLAKE2b-512"
  | "BLAKE3";
export type HashContentValue = string;
export type ComponentHashes = HashObjects[];
/**
 * EITHER (list of SPDX licenses and/or named licenses) OR (tuple of one SPDX License Expression)
 */
export type ComponentLicenseS = (MultipleLicenses | SPDXLicenseExpression) & unknown[];
export type LicenseObject = {
  [k: string]: unknown;
};
/**
 * A list of SPDX licenses and/or named licenses.
 */
export type MultipleLicenses = {
  license: LicenseObject;
}[];
/**
 * A tuple of exactly one SPDX License Expression.
 *
 * @minItems 1
 * @maxItems 1
 */
export type SPDXLicenseExpression = [
  {
    expression: SPDXLicenseExpression1;
    "bom-ref"?: BOMReference3;
  }
];
export type SPDXLicenseExpression1 = string;
/**
 * An optional identifier which can be used to reference the license elsewhere in the BOM. Every bom-ref MUST be unique within the BOM.
 */
export type BOMReference3 = string;
/**
 * A copyright notice informing users of the underlying claims to copyright ownership in a published work.
 */
export type ComponentCopyright = string;
/**
 * Specifies a well-formed CPE name that conforms to the CPE 2.2 or 2.3 specification. See [https://nvd.nist.gov/products/cpe](https://nvd.nist.gov/products/cpe)
 */
export type ComponentCommonPlatformEnumerationCPE = string;
/**
 * Specifies the package-url (purl). The purl, if specified, MUST be valid and conform to the specification defined at: [https://github.com/package-url/purl-spec](https://github.com/package-url/purl-spec)
 */
export type ComponentPackageURLPurl = string;
/**
 * Maps to the tagId of a SoftwareIdentity.
 */
export type TagID = string;
/**
 * Maps to the name of a SoftwareIdentity.
 */
export type Name3 = string;
/**
 * Maps to the version of a SoftwareIdentity.
 */
export type Version = string;
/**
 * Maps to the tagVersion of a SoftwareIdentity.
 */
export type TagVersion = number;
/**
 * Maps to the patch of a SoftwareIdentity.
 */
export type Patch = boolean;
/**
 * Specifies the content type of the text. Defaults to text/plain if not specified.
 */
export type ContentType = string;
/**
 * Specifies the optional encoding the text is represented in.
 */
export type Encoding = "base64";
/**
 * The attachment data. Proactive controls such as input validation and sanitization should be employed to prevent misuse of attachment text.
 */
export type AttachmentText1 = string;
/**
 * The URL to the SWID file.
 */
export type URL1 = string;
/**
 * [Deprecated] - DO NOT USE. This will be removed in a future version. Use the pedigree element instead to supply information on exactly how the component was modified. A boolean value indicating if the component has been modified from the original. A value of true indicates the component is a derivative of the original. A value of false indicates the component has not been modified from the original.
 */
export type ComponentModifiedFromOriginal = boolean;
/**
 * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
 */
export type Ancestors = ComponentObject[];
/**
 * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
 */
export type Descendants = ComponentObject[];
/**
 * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
 */
export type Variants = ComponentObject[];
/**
 * A unique identifier of the commit. This may be version control specific. For example, Subversion uses revision numbers whereas git uses commit hashes.
 */
export type UID = string;
/**
 * The URL to the commit. This URL will typically point to a commit in a version control system.
 */
export type URL2 = string;
/**
 * The timestamp in which the action occurred
 */
export type Timestamp1 = string;
/**
 * The name of the individual who performed the action
 */
export type Name4 = string;
/**
 * The email address of the individual who performed the action
 */
export type EMail = string;
/**
 * The text description of the contents of the commit
 */
export type Message = string;
/**
 * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
 */
export type Commits = Commit[];
/**
 * Specifies the purpose for the patch including the resolution of defects, security issues, or new behavior or functionality.
 *
 * * __unofficial__ = A patch which is not developed by the creators or maintainers of the software being patched. Refer to [https://en.wikipedia.org/wiki/Unofficial_patch](https://en.wikipedia.org/wiki/Unofficial_patch)
 * * __monkey__ = A patch which dynamically modifies runtime behavior. Refer to [https://en.wikipedia.org/wiki/Monkey_patch](https://en.wikipedia.org/wiki/Monkey_patch)
 * * __backport__ = A patch which takes code from a newer version of software and applies it to older versions of the same software. Refer to [https://en.wikipedia.org/wiki/Backporting](https://en.wikipedia.org/wiki/Backporting)
 * * __cherry-pick__ = A patch created by selectively applying commits from other versions or branches of the same software.
 */
export type Type = "unofficial" | "monkey" | "backport" | "cherry-pick";
/**
 * Specifies the URL to the diff
 */
export type URL3 = string;
/**
 * Specifies the type of issue
 */
export type Type1 = "defect" | "enhancement" | "security";
/**
 * The identifier of the issue assigned by the source of the issue
 */
export type ID = string;
/**
 * The name of the issue
 */
export type Name5 = string;
/**
 * A description of the issue
 */
export type Description1 = string;
/**
 * The name of the source. For example 'National Vulnerability Database', 'NVD', and 'Apache'
 */
export type Name6 = string;
/**
 * The url of the issue documentation as provided by the source
 */
export type URL4 = string;
/**
 * A collection of URL's for reference. Multiple URLs are allowed.
 */
export type References = string[];
/**
 * A collection of issues the patch resolves
 */
export type Resolves = Diff1[];
/**
 * >A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
 */
export type Patches = Patch1[];
/**
 * Notes, observations, and other non-structured commentary describing the components pedigree.
 */
export type Notes = string;
/**
 * The URI (URL or URN) to the external reference. External references are URIs and therefore can accept any URL scheme including https ([RFC-7230](https://www.ietf.org/rfc/rfc7230.txt)), mailto ([RFC-2368](https://www.ietf.org/rfc/rfc2368.txt)), tel ([RFC-3966](https://www.ietf.org/rfc/rfc3966.txt)), and dns ([RFC-4501](https://www.ietf.org/rfc/rfc4501.txt)). External references may also include formally registered URNs such as [CycloneDX BOM-Link](https://cyclonedx.org/capabilities/bomlink/) to reference CycloneDX BOMs or any object within a BOM. BOM-Link transforms applicable external references into relationships that can be expressed in a BOM or across BOMs.
 */
export type URL5 = URL6 | BOMLink;
export type URL6 = string;
export type BOMLink = BOMLinkDocument | BOMLinkElement;
/**
 * Descriptor for another BOM document. See https://cyclonedx.org/capabilities/bomlink/
 */
export type BOMLinkDocument = string;
/**
 * Descriptor for an element in a BOM document. See https://cyclonedx.org/capabilities/bomlink/
 */
export type BOMLinkElement = string;
/**
 * An optional comment describing the external reference
 */
export type Comment = string;
/**
 * Specifies the type of external reference.
 *
 * * __vcs__ = Version Control System
 * * __issue-tracker__ = Issue or defect tracking system, or an Application Lifecycle Management (ALM) system
 * * __website__ = Website
 * * __advisories__ = Security advisories
 * * __bom__ = Bill of Materials (SBOM, OBOM, HBOM, SaaSBOM, etc)
 * * __mailing-list__ = Mailing list or discussion group
 * * __social__ = Social media account
 * * __chat__ = Real-time chat platform
 * * __documentation__ = Documentation, guides, or how-to instructions
 * * __support__ = Community or commercial support
 * * __distribution__ = Direct or repository download location
 * * __distribution-intake__ = The location where a component was published to. This is often the same as "distribution" but may also include specialized publishing processes that act as an intermediary
 * * __license__ = The URL to the license file. If a license URL has been defined in the license node, it should also be defined as an external reference for completeness
 * * __build-meta__ = Build-system specific meta file (i.e. pom.xml, package.json, .nuspec, etc)
 * * __build-system__ = URL to an automated build system
 * * __release-notes__ = URL to release notes
 * * __security-contact__ = Specifies a way to contact the maintainer, supplier, or provider in the event of a security incident. Common URIs include links to a disclosure procedure, a mailto (RFC-2368) that specifies an email address, a tel (RFC-3966) that specifies a phone number, or dns (RFC-4501) that specifies the records containing DNS Security TXT
 * * __model-card__ = A model card describes the intended uses of a machine learning model, potential limitations, biases, ethical considerations, training parameters, datasets used to train the model, performance metrics, and other relevant data useful for ML transparency
 * * __log__ = A record of events that occurred in a computer system or application, such as problems, errors, or information on current operations
 * * __configuration__ = Parameters or settings that may be used by other components or services
 * * __evidence__ = Information used to substantiate a claim
 * * __formulation__ = Describes how a component or service was manufactured or deployed
 * * __attestation__ = Human or machine-readable statements containing facts, evidence, or testimony
 * * __threat-model__ = An enumeration of identified weaknesses, threats, and countermeasures, dataflow diagram (DFD), attack tree, and other supporting documentation in human-readable or machine-readable format
 * * __adversary-model__ = The defined assumptions, goals, and capabilities of an adversary.
 * * __risk-assessment__ = Identifies and analyzes the potential of future events that may negatively impact individuals, assets, and/or the environment. Risk assessments may also include judgments on the tolerability of each risk.
 * * __vulnerability-assertion__ = A Vulnerability Disclosure Report (VDR) which asserts the known and previously unknown vulnerabilities that affect a component, service, or product including the analysis and findings describing the impact (or lack of impact) that the reported vulnerability has on a component, service, or product.
 * * __exploitability-statement__ = A Vulnerability Exploitability eXchange (VEX) which asserts the known vulnerabilities that do not affect a product, product family, or organization, and optionally the ones that do. The VEX should include the analysis and findings describing the impact (or lack of impact) that the reported vulnerability has on the product, product family, or organization.
 * * __pentest-report__ = Results from an authorized simulated cyberattack on a component or service, otherwise known as a penetration test
 * * __static-analysis-report__ = SARIF or proprietary machine or human-readable report for which static analysis has identified code quality, security, and other potential issues with the source code
 * * __dynamic-analysis-report__ = Dynamic analysis report that has identified issues such as vulnerabilities and misconfigurations
 * * __runtime-analysis-report__ = Report generated by analyzing the call stack of a running application
 * * __component-analysis-report__ = Report generated by Software Composition Analysis (SCA), container analysis, or other forms of component analysis
 * * __maturity-report__ = Report containing a formal assessment of an organization, business unit, or team against a maturity model
 * * __certification-report__ = Industry, regulatory, or other certification from an accredited (if applicable) certification body
 * * __quality-metrics__ = Report or system in which quality metrics can be obtained
 * * __codified-infrastructure__ = Code or configuration that defines and provisions virtualized infrastructure, commonly referred to as Infrastructure as Code (IaC)
 * * __poam__ = Plans of Action and Milestones (POAM) compliment an "attestation" external reference. POAM is defined by NIST as a "document that identifies tasks needing to be accomplished. It details resources required to accomplish the elements of the plan, any milestones in meeting the tasks and scheduled completion dates for the milestones".
 * * __other__ = Use this if no other types accurately describe the purpose of the external reference
 */
export type Type2 =
  | "vcs"
  | "issue-tracker"
  | "website"
  | "advisories"
  | "bom"
  | "mailing-list"
  | "social"
  | "chat"
  | "documentation"
  | "support"
  | "distribution"
  | "distribution-intake"
  | "license"
  | "build-meta"
  | "build-system"
  | "release-notes"
  | "security-contact"
  | "model-card"
  | "log"
  | "configuration"
  | "evidence"
  | "formulation"
  | "attestation"
  | "threat-model"
  | "adversary-model"
  | "risk-assessment"
  | "vulnerability-assertion"
  | "exploitability-statement"
  | "pentest-report"
  | "static-analysis-report"
  | "dynamic-analysis-report"
  | "runtime-analysis-report"
  | "component-analysis-report"
  | "maturity-report"
  | "certification-report"
  | "codified-infrastructure"
  | "quality-metrics"
  | "poam"
  | "other";
/**
 * The hashes of the external reference (if applicable).
 */
export type Hashes = HashObjects[];
/**
 * External references provide a way to document systems, sites, and information that may be relevant, but are not included with the BOM. They may also establish specific relationships within or external to the BOM.
 */
export type ExternalReferences = ExternalReference[];
/**
 * A list of software and hardware components included in the parent component. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system &#8594; subsystem &#8594; parts assembly in physical supply chains.
 */
export type Components1 = ComponentObject[];
/**
 * The identity field of the component which the evidence describes.
 */
export type Field = "group" | "name" | "version" | "purl" | "cpe" | "swid" | "hash";
/**
 * The overall confidence of the evidence from 0 - 1, where 1 is 100% confidence.
 */
export type Confidence = number;
/**
 * The technique used in this method of analysis.
 */
export type Technique =
  | "source-code-analysis"
  | "binary-analysis"
  | "manifest-analysis"
  | "ast-fingerprint"
  | "hash-comparison"
  | "instrumentation"
  | "dynamic-analysis"
  | "filename"
  | "attestation"
  | "other";
/**
 * The confidence of the evidence from 0 - 1, where 1 is 100% confidence. Confidence is specific to the technique used. Each technique of analysis can have independent confidence.
 */
export type Confidence1 = number;
/**
 * The value or contents of the evidence.
 */
export type Value = string;
/**
 * The methods used to extract and/or analyze the evidence.
 */
export type Methods = {
  technique: Technique;
  confidence: Confidence1;
  value?: Value;
}[];
/**
 * Descriptor for an element identified by the attribute 'bom-ref' in the same BOM document.
 * In contrast to `bomLinkElementType`.
 */
export type Ref = RefType;
/**
 * Identifier for referable and therefore interlink-able elements.
 */
export type RefType = string;
/**
 * Descriptor for an element in a BOM document. See https://cyclonedx.org/capabilities/bomlink/
 */
export type BOMLinkElement1 = string;
/**
 * The object in the BOM identified by its bom-ref. This is often a component or service, but may be any object type supporting bom-refs. Tools used for analysis should already be defined in the BOM, either in the metadata/tools, components, or formulation.
 */
export type BOMReferences = (Ref | BOMLinkElement1)[];
/**
 * Identifier for referable and therefore interlink-able elements.
 */
export type BOMReference4 = string;
/**
 * The location or path to where the component was found.
 */
export type Location = string;
/**
 * Evidence of individual instances of a component spread across multiple locations.
 */
export type Occurrences = {
  "bom-ref"?: BOMReference4;
  location: Location;
}[];
/**
 * A package organizes modules into namespaces, providing a unique namespace for each type it contains.
 */
export type Package = string;
/**
 * A module or class that encloses functions/methods and other code.
 */
export type Module = string;
/**
 * A block of code designed to perform a particular task.
 */
export type Function = string;
/**
 * Optional arguments that are passed to the module or function.
 */
export type Parameters = string[];
/**
 * The line number the code that is called resides on.
 */
export type Line = number;
/**
 * The column the code that is called resides.
 */
export type Column = number;
/**
 * The full path and filename of the module.
 */
export type FullFilename = string;
export type Methods1 = {
  package?: Package;
  module: Module;
  function?: Function;
  parameters?: Parameters;
  line?: Line;
  column?: Column;
  fullFilename?: FullFilename;
}[];
/**
 * EITHER (list of SPDX licenses and/or named licenses) OR (tuple of one SPDX License Expression)
 */
export type ComponentLicenseS1 = (MultipleLicenses | SPDXLicenseExpression) & unknown[];
export type CopyrightText = string;
export type Copyright = Copyright1[];
/**
 * The software versioning type the release note describes.
 */
export type Type3 = string;
/**
 * The title of the release.
 */
export type Title = string;
/**
 * The URL to an image that may be prominently displayed with the release note.
 */
export type FeaturedImage = string;
/**
 * The URL to an image that may be used in messaging on social media platforms.
 */
export type SocialImage = string;
/**
 * A short description of the release.
 */
export type Description2 = string;
/**
 * The date and time (timestamp) when the release note was created.
 */
export type Timestamp2 = string;
/**
 * One or more alternate names the release may be referred to. This may include unofficial terms used by development and marketing teams (e.g. code names).
 */
export type Aliases = string[];
/**
 * One or more tags that may aid in search or retrieval of the release note.
 */
export type Tags = string[];
/**
 * A collection of issues that have been resolved.
 */
export type Resolves1 = Diff1[];
/**
 * The ISO-639 (or higher) language code and optional ISO-3166 (or higher) country code. Examples include: "en", "en-US", "fr" and "fr-CA"
 */
export type Locale = string;
/**
 * Zero or more release notes containing the locale and content. Multiple note objects may be specified to support release notes in a wide variety of languages.
 */
export type Notes1 = Note[];
/**
 * The name of the property. Duplicate names are allowed, each potentially having a different value.
 */
export type Name7 = string;
/**
 * The value of the property.
 */
export type Value1 = string;
/**
 * Provides the ability to document properties in a name-value store. This provides flexibility to include data not officially supported in the standard without having to use additional namespaces or create extensions. Unlike key-value stores, properties support duplicate names, each potentially having different values. Property names of interest to the general public are encouraged to be registered in the [CycloneDX Property Taxonomy](https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal registration is OPTIONAL.
 */
export type Properties = LightweightNameValuePair[];
/**
 * Identifier for referable and therefore interlink-able elements.
 */
export type BOMReference5 = string;
/**
 * Learning types describing the learning problem or hybrid learning problem.
 */
export type LearningType =
  | "supervised"
  | "unsupervised"
  | "reinforcement-learning"
  | "semi-supervised"
  | "self-supervised";
/**
 * Directly influences the input and/or output. Examples include classification, regression, clustering, etc.
 */
export type Task = string;
/**
 * The model architecture family such as transformer network, convolutional neural network, residual neural network, LSTM neural network, etc.
 */
export type ArchitectureFamily = string;
/**
 * The specific architecture of the model such as GPT-1, ResNet-50, YOLOv3, etc.
 */
export type ModelArchitecture = string;
/**
 * Identifier for referable and therefore interlink-able elements.
 */
export type BOMReference6 = string;
/**
 * The general theme or subject matter of the data being specified.
 *
 * * __source-code__ = Any type of code, code snippet, or data-as-code.
 * * __configuration__ = Parameters or settings that may be used by other components.
 * * __dataset__ = A collection of data.
 * * __definition__ = Data that can be used to create new instances of what the definition defines.
 * * __other__ = Any other type of data that does not fit into existing definitions.
 */
export type TypeOfData = "source-code" | "configuration" | "dataset" | "definition" | "other";
/**
 * The URL to where the data can be retrieved.
 */
export type DataURL = string;
/**
 * Provides the ability to document name-value parameters used for configuration.
 */
export type ConfigurationProperties = LightweightNameValuePair[];
/**
 * Data classification tags data according to its type, sensitivity, and value if altered, stolen, or destroyed.
 */
export type DataClassification = string;
export type DataGovernanceResponsibleParty = {
  organization?: Organization;
  contact?: OrganizationalContactObject1;
} & DataGovernanceResponsibleParty1;
export type DataGovernanceResponsibleParty1 = {
  [k: string]: unknown;
};
/**
 * Data custodians are responsible for the safe custody, transport, and storage of data.
 */
export type DataCustodians = DataGovernanceResponsibleParty[];
/**
 * Data stewards are responsible for data content, context, and associated business rules.
 */
export type DataStewards = DataGovernanceResponsibleParty[];
/**
 * Data owners are concerned with risk and appropriate access to data.
 */
export type DataOwners = DataGovernanceResponsibleParty[];
/**
 * References a data component by the components bom-ref attribute
 */
export type Reference = Ref1 | BOMLinkElement2;
/**
 * Descriptor for an element identified by the attribute 'bom-ref' in the same BOM document.
 * In contrast to `bomLinkElementType`.
 */
export type Ref1 = RefType;
/**
 * Descriptor for an element in a BOM document. See https://cyclonedx.org/capabilities/bomlink/
 */
export type BOMLinkElement2 = string;
/**
 * The datasets used to train and evaluate the model.
 */
export type Datasets = (InlineComponentData | DataComponentReference)[];
/**
 * The input format(s) of the model
 */
export type Inputs = InputAndOutputParameters[];
/**
 * The output format(s) from the model
 */
export type Outputs = InputAndOutputParameters[];
/**
 * The model performance metrics being reported. Examples may include accuracy, F1 score, precision, top-3 error rates, MSC, etc.
 */
export type PerformanceMetrics = PerformanceMetric[];
/**
 * Who are the intended users of the model?
 */
export type Users = string[];
/**
 * What are the intended use cases of the model?
 */
export type UseCases = string[];
/**
 * What are the known technical limitations of the model? E.g. What kind(s) of data should the model be expected not to perform well on? What are the factors that might degrade model performance?
 */
export type TechnicalLimitations = string[];
/**
 * What are the known tradeoffs in accuracy/performance of the model?
 */
export type PerformanceTradeoffs = string[];
/**
 * What are the ethical (or environmental) risks involved in the application of this model?
 */
export type EthicalConsiderations = Risk[];
/**
 * How does the model affect groups at risk of being systematically disadvantaged? What are the harms and benefits to the various affected groups?
 */
export type FairnessAssessments = FairnessAssessment[];
/**
 * Provides the ability to document properties in a name-value store. This provides flexibility to include data not officially supported in the standard without having to use additional namespaces or create extensions. Unlike key-value stores, properties support duplicate names, each potentially having different values. Property names of interest to the general public are encouraged to be registered in the [CycloneDX Property Taxonomy](https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal registration is OPTIONAL.
 */
export type Properties1 = LightweightNameValuePair[];
/**
 * This object SHOULD be specified for any component of type `data` and MUST NOT be specified for other component types.
 */
export type Data = ComponentData[];
/**
 * Provides the ability to document properties in a name-value store. This provides flexibility to include data not officially supported in the standard without having to use additional namespaces or create extensions. Unlike key-value stores, properties support duplicate names, each potentially having different values. Property names of interest to the general public are encouraged to be registered in the [CycloneDX Property Taxonomy](https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal registration is OPTIONAL.
 */
export type Properties2 = LightweightNameValuePair[];
/**
 * Enveloped signature in [JSON Signature Format (JSF)](https://cyberphone.github.io/doc/security/jsf.html).
 */
export type Signature =
  | {
      signers?: Signature1;
    }
  | {
      chain?: Signature4;
    }
  | Signature5;
/**
 * Signature algorithm. The currently recognized JWA [RFC7518] and RFC8037 [RFC8037] asymmetric key algorithms. Note: Unlike RFC8037 [RFC8037] JSF requires explicit Ed* algorithm names instead of "EdDSA".
 */
export type Algorithm =
  | "RS256"
  | "RS384"
  | "RS512"
  | "PS256"
  | "PS384"
  | "PS512"
  | "ES256"
  | "ES384"
  | "ES512"
  | "Ed25519"
  | "Ed448"
  | "HS256"
  | "HS384"
  | "HS512";
/**
 * Signature algorithm. Note: If proprietary signature algorithms are added, they must be expressed as URIs.
 */
export type Algorithm1 = string;
/**
 * Optional. Application specific string identifying the signature key.
 */
export type KeyID = string;
/**
 * Optional. Public key object.
 */
export type PublicKey = {
  [k: string]: unknown;
};
/**
 * Optional. Sorted array of X.509 [RFC5280] certificates, where the first element must contain the signature certificate. The certificate path must be contiguous but is not required to be complete.
 */
export type CertificatePath = string[];
/**
 * Optional. Array holding the names of one or more application level properties that must be excluded from the signature process. Note that the "excludes" property itself, must also be excluded from the signature process. Since both the "excludes" property and the associated data it points to are unsigned, a conforming JSF implementation must provide options for specifying which properties to accept.
 */
export type Excludes = string[];
/**
 * The signature data. Note that the binary representation must follow the JWA [RFC7518] specifications.
 */
export type Signature3 = string;
/**
 * Unique top level property for Multiple Signatures. (multisignature)
 */
export type Signature1 = Signature2[];
/**
 * Unique top level property for Signature Chains. (signaturechain)
 */
export type Signature4 = Signature2[];
/**
 * A list of software and hardware components used as tools
 */
export type Components = ComponentObject[];
/**
 * Identifier for referable and therefore interlink-able elements.
 */
export type BOMReference7 = string;
/**
 * The grouping name, namespace, or identifier. This will often be a shortened, single name of the company or project that produced the service or domain name. Whitespace and special characters should be avoided.
 */
export type ServiceGroup = string;
/**
 * The name of the service. This will often be a shortened, single name of the service.
 */
export type ServiceName = string;
/**
 * The service version.
 */
export type ServiceVersion = string;
/**
 * Specifies a description for the service
 */
export type ServiceDescription = string;
/**
 * The endpoint URIs of the service. Multiple endpoints are allowed.
 */
export type Endpoints = string[];
/**
 * A boolean value indicating if the service requires authentication. A value of true indicates the service requires authentication prior to use. A value of false indicates the service does not require authentication.
 */
export type AuthenticationRequired = boolean;
/**
 * A boolean value indicating if use of the service crosses a trust zone or boundary. A value of true indicates that by using the service, a trust boundary is crossed. A value of false indicates that by using the service, a trust boundary is not crossed.
 */
export type CrossesTrustBoundary = boolean;
/**
 * The name of the trust zone the service resides in.
 */
export type TrustZone = string;
/**
 * Specifies the flow direction of the data. Direction is relative to the service. Inbound flow states that data enters the service. Outbound flow states that data leaves the service. Bi-directional states that data flows both ways, and unknown states that the direction is not known.
 */
export type DirectionalFlow = "inbound" | "outbound" | "bi-directional" | "unknown";
/**
 * Name for the defined data
 */
export type Name8 = string;
/**
 * Short description of the data content and usage
 */
export type Description3 = string;
export type URL7 = string;
/**
 * Descriptor for an element in a BOM document. See https://cyclonedx.org/capabilities/bomlink/
 */
export type BOMLinkElement3 = string;
/**
 * The URI, URL, or BOM-Link of the components or services the data came in from
 */
export type Source1 = (URL7 | BOMLinkElement3)[];
export type URL8 = string;
/**
 * Descriptor for an element in a BOM document. See https://cyclonedx.org/capabilities/bomlink/
 */
export type BOMLinkElement4 = string;
/**
 * The URI, URL, or BOM-Link of the components or services the data is sent to
 */
export type Destination = (URL8 | BOMLinkElement4)[];
/**
 * Specifies information about the data including the directional flow of data and the data classification.
 */
export type Data1 = HashObjects1[];
/**
 * EITHER (list of SPDX licenses and/or named licenses) OR (tuple of one SPDX License Expression)
 */
export type ComponentLicenseS2 = (MultipleLicenses | SPDXLicenseExpression) & unknown[];
/**
 * External references provide a way to document systems, sites, and information that may be relevant, but are not included with the BOM. They may also establish specific relationships within or external to the BOM.
 */
export type ExternalReferences1 = ExternalReference[];
/**
 * A list of services included or deployed behind the parent service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies.
 */
export type Services1 = ServiceObject[];
/**
 * Provides the ability to document properties in a name-value store. This provides flexibility to include data not officially supported in the standard without having to use additional namespaces or create extensions. Unlike key-value stores, properties support duplicate names, each potentially having different values. Property names of interest to the general public are encouraged to be registered in the [CycloneDX Property Taxonomy](https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal registration is OPTIONAL.
 */
export type Properties3 = LightweightNameValuePair[];
/**
 * Enveloped signature in [JSON Signature Format (JSF)](https://cyberphone.github.io/doc/security/jsf.html).
 */
export type Signature6 =
  | {
      signers?: Signature1;
    }
  | {
      chain?: Signature4;
    }
  | Signature5;
/**
 * A list of services used as tools. This may include microservices, function-as-a-service, and other types of network or intra-process services.
 */
export type Services = ServiceObject[];
/**
 * The name of the vendor who created the tool
 */
export type ToolVendor = string;
/**
 * The name of the tool
 */
export type ToolName = string;
/**
 * The version of the tool
 */
export type ToolVersion = string;
/**
 * The hashes of the tool (if applicable).
 */
export type Hashes1 = HashObjects[];
/**
 * External references provide a way to document systems, sites, and information that may be relevant, but are not included with the BOM. They may also establish specific relationships within or external to the BOM.
 */
export type ExternalReferences2 = ExternalReference[];
/**
 * [Deprecated] The tool(s) used in the creation of the BOM.
 */
export type CreationToolsLegacy = Tool[];
/**
 * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
 */
export type Authors = OrganizationalContactObject[];
/**
 * EITHER (list of SPDX licenses and/or named licenses) OR (tuple of one SPDX License Expression)
 */
export type BOMLicenseS = (MultipleLicenses | SPDXLicenseExpression) & unknown[];
/**
 * Provides the ability to document properties in a name-value store. This provides flexibility to include data not officially supported in the standard without having to use additional namespaces or create extensions. Unlike key-value stores, properties support duplicate names, each potentially having different values. Property names of interest to the general public are encouraged to be registered in the [CycloneDX Property Taxonomy](https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal registration is OPTIONAL.
 */
export type Properties4 = LightweightNameValuePair[];
/**
 * A list of software and hardware components.
 */
export type Components2 = ComponentObject[];
/**
 * A list of services. This may include microservices, function-as-a-service, and other types of network or intra-process services.
 */
export type Services2 = ServiceObject[];
/**
 * External references provide a way to document systems, sites, and information that may be relevant, but are not included with the BOM. They may also establish specific relationships within or external to the BOM.
 */
export type ExternalReferences3 = ExternalReference[];
/**
 * References a component or service by its bom-ref attribute
 */
export type Reference1 = RefType;
/**
 * Descriptor for an element identified by the attribute 'bom-ref' in the same BOM document.
 * In contrast to `bomLinkElementType`.
 */
export type RefLinkType = RefType;
/**
 * The bom-ref identifiers of the components or services that are dependencies of this dependency object.
 */
export type DependsOn = RefLinkType[];
/**
 * Provides the ability to document dependency relationships.
 */
export type Dependencies = Dependency[];
/**
 * Identifier for referable and therefore interlink-able elements.
 */
export type BOMReference8 = string;
/**
 * Specifies an aggregate type that describe how complete a relationship is.
 *
 * * __complete__ = The relationship is complete. No further relationships including constituent components, services, or dependencies are known to exist.
 * * __incomplete__ = The relationship is incomplete. Additional relationships exist and may include constituent components, services, or dependencies.
 * * __incomplete&#95;first&#95;party&#95;only__ = The relationship is incomplete. Only relationships for first-party components, services, or their dependencies are represented.
 * * __incomplete&#95;first&#95;party&#95;proprietary&#95;only__ = The relationship is incomplete. Only relationships for first-party components, services, or their dependencies are represented, limited specifically to those that are proprietary.
 * * __incomplete&#95;first&#95;party&#95;opensource&#95;only__ = The relationship is incomplete. Only relationships for first-party components, services, or their dependencies are represented, limited specifically to those that are opensource.
 * * __incomplete&#95;third&#95;party&#95;only__ = The relationship is incomplete. Only relationships for third-party components, services, or their dependencies are represented.
 * * __incomplete&#95;third&#95;party&#95;proprietary&#95;only__ = The relationship is incomplete. Only relationships for third-party components, services, or their dependencies are represented, limited specifically to those that are proprietary.
 * * __incomplete&#95;third&#95;party&#95;opensource&#95;only__ = The relationship is incomplete. Only relationships for third-party components, services, or their dependencies are represented, limited specifically to those that are opensource.
 * * __unknown__ = The relationship may be complete or incomplete. This usually signifies a 'best-effort' to obtain constituent components, services, or dependencies but the completeness is inconclusive.
 * * __not&#95;specified__ = The relationship completeness is not specified.
 *
 */
export type Aggregate =
  | "complete"
  | "incomplete"
  | "incomplete_first_party_only"
  | "incomplete_first_party_proprietary_only"
  | "incomplete_first_party_opensource_only"
  | "incomplete_third_party_only"
  | "incomplete_third_party_proprietary_only"
  | "incomplete_third_party_opensource_only"
  | "unknown"
  | "not_specified";
/**
 * Descriptor for an element identified by the attribute 'bom-ref' in the same BOM document.
 * In contrast to `bomLinkElementType`.
 */
export type Ref2 = RefType;
/**
 * Descriptor for an element in a BOM document. See https://cyclonedx.org/capabilities/bomlink/
 */
export type BOMLinkElement5 = string;
/**
 * The bom-ref identifiers of the components or services being described. Assemblies refer to nested relationships whereby a constituent part may include other constituent parts. References do not cascade to child parts. References are explicit for the specified constituent part only.
 */
export type BOMReferences1 = (Ref2 | BOMLinkElement5)[];
/**
 * The bom-ref identifiers of the components or services being described. Dependencies refer to a relationship whereby an independent constituent part requires another independent constituent part. References do not cascade to transitive dependencies. References are explicit for the specified dependency only.
 */
export type BOMReferences2 = string[];
/**
 * The bom-ref identifiers of the vulnerabilities being described.
 */
export type BOMReferences3 = string[];
/**
 * Enveloped signature in [JSON Signature Format (JSF)](https://cyberphone.github.io/doc/security/jsf.html).
 */
export type Signature7 =
  | {
      signers?: Signature1;
    }
  | {
      chain?: Signature4;
    }
  | Signature5;
/**
 * Compositions describe constituent parts (including components, services, and dependency relationships) and their completeness. The completeness of vulnerabilities expressed in a BOM may also be described.
 */
export type Compositions = Compositions1[];
/**
 * Identifier for referable and therefore interlink-able elements.
 */
export type BOMReference9 = string;
/**
 * The identifier that uniquely identifies the vulnerability.
 */
export type ID1 = string;
/**
 * The url of the vulnerability documentation as provided by the source.
 */
export type URL9 = string;
/**
 * The name of the source.
 */
export type Name9 = string;
/**
 * An identifier that uniquely identifies the vulnerability.
 */
export type ID2 = string;
/**
 * Zero or more pointers to vulnerabilities that are the equivalent of the vulnerability specified. Often times, the same vulnerability may exist in multiple sources of vulnerability intelligence, but have different identifiers. References provide a way to correlate vulnerabilities across multiple sources of vulnerability intelligence.
 */
export type References1 = {
  id: ID2;
  source: Source3;
}[];
/**
 * The numerical score of the rating.
 */
export type Score = number;
/**
 * Textual representation of the severity that corresponds to the numerical score of the rating.
 */
export type Severity = "critical" | "high" | "medium" | "low" | "info" | "none" | "unknown";
/**
 * Specifies the severity or risk scoring methodology or standard used.
 *
 * * CVSSv2 - [Common Vulnerability Scoring System v2](https://www.first.org/cvss/v2/)
 * * CVSSv3 - [Common Vulnerability Scoring System v3](https://www.first.org/cvss/v3-0/)
 * * CVSSv31 - [Common Vulnerability Scoring System v3.1](https://www.first.org/cvss/v3-1/)
 * * CVSSv4 - [Common Vulnerability Scoring System v4](https://www.first.org/cvss/v4-0/)
 * * OWASP - [OWASP Risk Rating Methodology](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology)
 * * SSVC - [Stakeholder Specific Vulnerability Categorization](https://github.com/CERTCC/SSVC) (all versions)
 */
export type Method = "CVSSv2" | "CVSSv3" | "CVSSv31" | "CVSSv4" | "OWASP" | "SSVC" | "other";
/**
 * Textual representation of the metric values used to score the vulnerability
 */
export type Vector = string;
/**
 * An optional reason for rating the vulnerability as it was
 */
export type Justification = string;
/**
 * List of vulnerability ratings
 */
export type Ratings = Rating[];
/**
 * Integer representation of a Common Weaknesses Enumerations (CWE). For example 399 (of https://cwe.mitre.org/data/definitions/399.html)
 */
export type CWE = number;
/**
 * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability. For example 399 (of https://cwe.mitre.org/data/definitions/399.html)
 */
export type CWEs = CWE[];
/**
 * A description of the vulnerability as provided by the source.
 */
export type Description4 = string;
/**
 * If available, an in-depth description of the vulnerability as provided by the source organization. Details often include information useful in understanding root cause.
 */
export type Details = string;
/**
 * Recommendations of how the vulnerability can be remediated or mitigated.
 */
export type Recommendation = string;
/**
 * A bypass, usually temporary, of the vulnerability that reduces its likelihood and/or impact. Workarounds often involve changes to configuration or deployments.
 */
export type Workarounds = string;
/**
 * Precise steps to reproduce the vulnerability.
 */
export type StepsToReproduce = string;
/**
 * A description of the environment in which reproduction was possible.
 */
export type Environment = string;
/**
 * Supporting material that helps in reproducing or understanding how reproduction is possible. This may include screenshots, payloads, and PoC exploit code.
 */
export type SupportingMaterial = Attachment[];
/**
 * An optional name of the advisory.
 */
export type Title1 = string;
/**
 * Location where the advisory can be obtained.
 */
export type URL10 = string;
/**
 * Published advisories of the vulnerability if provided.
 */
export type Advisories = Advisory[];
/**
 * The date and time (timestamp) when the vulnerability record was created in the vulnerability database.
 */
export type Created = string;
/**
 * The date and time (timestamp) when the vulnerability record was first published.
 */
export type Published = string;
/**
 * The date and time (timestamp) when the vulnerability record was last updated.
 */
export type Updated = string;
/**
 * The date and time (timestamp) when the vulnerability record was rejected (if applicable).
 */
export type Rejected = string;
/**
 * The organizations credited with vulnerability discovery.
 */
export type Organizations = OrganizationalEntityObject[];
/**
 * The individuals, not associated with organizations, that are credited with vulnerability discovery.
 */
export type Individuals = OrganizationalContactObject[];
/**
 * A list of software and hardware components used as tools
 */
export type Components3 = ComponentObject[];
/**
 * A list of services used as tools. This may include microservices, function-as-a-service, and other types of network or intra-process services.
 */
export type Services3 = ServiceObject[];
/**
 * [Deprecated] The tool(s) used to identify, confirm, or score the vulnerability.
 */
export type ToolsLegacy = Tool[];
/**
 * Declares the current state of an occurrence of a vulnerability, after automated or manual analysis.
 *
 * * __resolved__ = the vulnerability has been remediated.
 * * __resolved\_with\_pedigree__ = the vulnerability has been remediated and evidence of the changes are provided in the affected components pedigree containing verifiable commit history and/or diff(s).
 * * __exploitable__ = the vulnerability may be directly or indirectly exploitable.
 * * __in\_triage__ = the vulnerability is being investigated.
 * * __false\_positive__ = the vulnerability is not specific to the component or service and was falsely identified or associated.
 * * __not\_affected__ = the component or service is not affected by the vulnerability. Justification should be specified for all not_affected cases.
 */
export type ImpactAnalysisState =
  | "resolved"
  | "resolved_with_pedigree"
  | "exploitable"
  | "in_triage"
  | "false_positive"
  | "not_affected";
/**
 * The rationale of why the impact analysis state was asserted.
 *
 * * __code\_not\_present__ = the code has been removed or tree-shaked.
 * * __code\_not\_reachable__ = the vulnerable code is not invoked at runtime.
 * * __requires\_configuration__ = exploitability requires a configurable option to be set/unset.
 * * __requires\_dependency__ = exploitability requires a dependency that is not present.
 * * __requires\_environment__ = exploitability requires a certain environment which is not present.
 * * __protected\_by\_compiler__ = exploitability requires a compiler flag to be set/unset.
 * * __protected\_at\_runtime__ = exploits are prevented at runtime.
 * * __protected\_at\_perimeter__ = attacks are blocked at physical, logical, or network perimeter.
 * * __protected\_by\_mitigating\_control__ = preventative measures have been implemented that reduce the likelihood and/or impact of the vulnerability.
 */
export type ImpactAnalysisJustification =
  | "code_not_present"
  | "code_not_reachable"
  | "requires_configuration"
  | "requires_dependency"
  | "requires_environment"
  | "protected_by_compiler"
  | "protected_at_runtime"
  | "protected_at_perimeter"
  | "protected_by_mitigating_control";
/**
 * A response to the vulnerability by the manufacturer, supplier, or project responsible for the affected component or service. More than one response is allowed. Responses are strongly encouraged for vulnerabilities where the analysis state is exploitable.
 */
export type Response = ("can_not_fix" | "will_not_fix" | "update" | "rollback" | "workaround_available")[];
/**
 * Detailed description of the impact including methods used during assessment. If a vulnerability is not exploitable, this field should include specific details on why the component or service is not impacted by this vulnerability.
 */
export type Detail = string;
/**
 * The date and time (timestamp) when the analysis was first issued.
 */
export type FirstIssued = string;
/**
 * The date and time (timestamp) when the analysis was last updated.
 */
export type LastUpdated = string;
/**
 * References a component or service by the objects bom-ref
 */
export type Reference2 = Ref3 | BOMLinkElement6;
/**
 * Descriptor for an element identified by the attribute 'bom-ref' in the same BOM document.
 * In contrast to `bomLinkElementType`.
 */
export type Ref3 = RefType;
/**
 * Descriptor for an element in a BOM document. See https://cyclonedx.org/capabilities/bomlink/
 */
export type BOMLinkElement6 = string;
/**
 * Zero or more individual versions or range of versions.
 */
export type Versions = {
  [k: string]: unknown;
}[];
/**
 * The components or services that are affected by the vulnerability.
 */
export type Affects = {
  ref: Reference2;
  versions?: Versions;
}[];
/**
 * Provides the ability to document properties in a name-value store. This provides flexibility to include data not officially supported in the standard without having to use additional namespaces or create extensions. Unlike key-value stores, properties support duplicate names, each potentially having different values. Property names of interest to the general public are encouraged to be registered in the [CycloneDX Property Taxonomy](https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal registration is OPTIONAL.
 */
export type Properties5 = LightweightNameValuePair[];
/**
 * Vulnerabilities identified in components or services.
 */
export type Vulnerabilities = Vulnerability[];
/**
 * Identifier for referable and therefore interlink-able elements.
 */
export type BOMReference10 = string;
/**
 * Descriptor for an element identified by the attribute 'bom-ref' in the same BOM document.
 * In contrast to `bomLinkElementType`.
 */
export type Ref4 = RefType;
/**
 * Descriptor for an element in a BOM document. See https://cyclonedx.org/capabilities/bomlink/
 */
export type BOMLinkElement7 = string;
/**
 * The object in the BOM identified by its bom-ref. This is often a component or service, but may be any object type supporting bom-refs.
 */
export type BOMReferences4 = (Ref4 | BOMLinkElement7)[];
/**
 * The organization, person, component, or service which created the textual content of the annotation.
 */
export type Annotator = {
  [k: string]: unknown;
};
/**
 * The date and time (timestamp) when the annotation was created.
 */
export type Timestamp3 = string;
/**
 * The textual content of the annotation.
 */
export type Text = string;
/**
 * Enveloped signature in [JSON Signature Format (JSF)](https://cyberphone.github.io/doc/security/jsf.html).
 */
export type Signature8 =
  | {
      signers?: Signature1;
    }
  | {
      chain?: Signature4;
    }
  | Signature5;
/**
 * Comments made by people, organizations, or tools about any object with a bom-ref, such as components, services, vulnerabilities, or the BOM itself. Unlike inventory information, annotations may contain opinion or commentary from various stakeholders. Annotations may be inline (with inventory) or externalized via BOM-Link, and may optionally be signed.
 */
export type Annotations = Annotations1[];
/**
 * Identifier for referable and therefore interlink-able elements.
 */
export type BOMReference11 = string;
/**
 * Transient components that are used in tasks that constitute one or more of this formula's workflows
 */
export type Components4 = ComponentObject[];
/**
 * Transient services that are used in tasks that constitute one or more of this formula's workflows
 */
export type Services4 = ServiceObject[];
/**
 * Identifier for referable and therefore interlink-able elements.
 */
export type BOMReference12 = string;
/**
 * The unique identifier for the resource instance within its deployment context.
 */
export type UniqueIdentifierUID = string;
/**
 * The name of the resource instance.
 */
export type Name10 = string;
/**
 * A description of the resource instance.
 */
export type Description5 = string;
/**
 * A reference to a locally defined resource (e.g., a bom-ref) or an externally accessible resource.
 */
export type ResourceReferenceChoice = {
  [k: string]: unknown;
};
/**
 * References to component or service resources that are used to realize the resource instance.
 */
export type ResourceReferences = ResourceReferenceChoice[];
/**
 * Identifier for referable and therefore interlink-able elements.
 */
export type BOMReference13 = string;
/**
 * The unique identifier for the resource instance within its deployment context.
 */
export type UniqueIdentifierUID1 = string;
/**
 * The name of the resource instance.
 */
export type Name11 = string;
/**
 * A description of the resource instance.
 */
export type Description6 = string;
/**
 * References to component or service resources that are used to realize the resource instance.
 */
export type ResourceReferences1 = ResourceReferenceChoice[];
export type TaskType =
  | "copy"
  | "clone"
  | "lint"
  | "scan"
  | "merge"
  | "build"
  | "test"
  | "deliver"
  | "deploy"
  | "release"
  | "clean"
  | "other";
/**
 * Indicates the types of activities performed by the set of workflow tasks.
 */
export type TaskTypes = TaskType[];
/**
 * Identifier for referable and therefore interlink-able elements.
 */
export type BOMReference14 = string;
/**
 * The unique identifier for the resource instance within its deployment context.
 */
export type UniqueIdentifierUID2 = string;
/**
 * The name of the resource instance.
 */
export type Name12 = string;
/**
 * A description of the resource instance.
 */
export type Description7 = string;
/**
 * References to component or service resources that are used to realize the resource instance.
 */
export type ResourceReferences2 = ResourceReferenceChoice[];
/**
 * The source type of event which caused the trigger to fire.
 */
export type Type4 = "manual" | "api" | "webhook" | "scheduled";
/**
 * The unique identifier of the event.
 */
export type UniqueIdentifierUID3 = string;
/**
 * A description of the event.
 */
export type Description8 = string;
/**
 * The date and time (timestamp) when the event was received.
 */
export type TimeReceived = string;
/**
 * A reference to a locally defined resource (e.g., a bom-ref) or an externally accessible resource.
 */
export type ResourceReferenceChoice1 = {
  [k: string]: unknown;
};
/**
 * A reference to a locally defined resource (e.g., a bom-ref) or an externally accessible resource.
 */
export type ResourceReferenceChoice2 = {
  [k: string]: unknown;
};
export type Properties6 = LightweightNameValuePair[];
/**
 * Describes the set of conditions which cause the trigger to activate.
 */
export type Description9 = string;
/**
 * The logical expression that was evaluated that determined the trigger should be fired.
 */
export type Expression = string;
export type Properties7 = LightweightNameValuePair[];
/**
 * The date and time (timestamp) when the trigger was activated.
 */
export type TimeActivated = string;
/**
 * Type that represents various input data types and formats.
 */
export type InputType = {
  [k: string]: unknown;
};
/**
 * Represents resources and data brought into a task at runtime by executor or task commands
 */
export type Inputs1 = InputType[];
export type OutputType = {
  type?: Type5;
  source?: ResourceReferenceChoice3;
  target?: ResourceReferenceChoice4;
  resource?: ResourceReferenceChoice5;
  data?: Attachment2;
  environmentVars?: EnvironmentVariables;
  properties?: Properties8;
} & OutputType1;
/**
 * Describes the type of data output.
 */
export type Type5 = "artifact" | "attestation" | "log" | "evidence" | "metrics" | "other";
/**
 * A reference to a locally defined resource (e.g., a bom-ref) or an externally accessible resource.
 */
export type ResourceReferenceChoice3 = {
  [k: string]: unknown;
};
/**
 * A reference to a locally defined resource (e.g., a bom-ref) or an externally accessible resource.
 */
export type ResourceReferenceChoice4 = {
  [k: string]: unknown;
};
/**
 * A reference to a locally defined resource (e.g., a bom-ref) or an externally accessible resource.
 */
export type ResourceReferenceChoice5 = {
  [k: string]: unknown;
};
/**
 * Outputs that have the form of environment variables.
 */
export type EnvironmentVariables = (LightweightNameValuePair | string)[];
export type Properties8 = LightweightNameValuePair[];
export type OutputType1 = {
  [k: string]: unknown;
};
/**
 * Represents resources and data output from a task at runtime by executor or task commands
 */
export type Outputs1 = OutputType[];
export type Properties9 = LightweightNameValuePair[];
/**
 * A name for the step.
 */
export type Name13 = string;
/**
 * A description of the step.
 */
export type Description10 = string;
/**
 * A text representation of the executed command.
 */
export type Executed = string;
export type Properties10 = LightweightNameValuePair[];
/**
 * Ordered list of commands or directives for the step
 */
export type Commands = Command[];
export type Properties11 = LightweightNameValuePair[];
/**
 * The sequence of steps for the task.
 */
export type Steps = Step[];
/**
 * Represents resources and data brought into a task at runtime by executor or task commands
 */
export type Inputs2 = InputType[];
/**
 * Represents resources and data output from a task at runtime by executor or task commands
 */
export type Outputs2 = OutputType[];
/**
 * The date and time (timestamp) when the task started.
 */
export type TimeStart = string;
/**
 * The date and time (timestamp) when the task ended.
 */
export type TimeEnd = string;
/**
 * Identifier for referable and therefore interlink-able elements.
 */
export type BOMReference15 = string;
/**
 * The unique identifier for the resource instance within its deployment context.
 */
export type UniqueIdentifierUID4 = string;
/**
 * The name of the resource instance.
 */
export type Name14 = string;
/**
 * The names for the workspace as referenced by other workflow tasks. Effectively, a name mapping so other tasks can use their own local name in their steps.
 */
export type Aliases1 = string[];
/**
 * A description of the resource instance.
 */
export type Description11 = string;
/**
 * References to component or service resources that are used to realize the resource instance.
 */
export type ResourceReferences3 = ResourceReferenceChoice[];
/**
 * Describes the read-write access control for the workspace relative to the owning resource instance.
 */
export type AccessMode = "read-only" | "read-write" | "read-write-once" | "write-once" | "write-only";
/**
 * A path to a location on disk where the workspace will be available to the associated task's steps.
 */
export type MountPath = string;
/**
 * The name of a domain-specific data type the workspace represents.
 */
export type ManagedDataType = string;
/**
 * Identifies the reference to the request for a specific volume type and parameters.
 */
export type VolumeRequest = string;
/**
 * The unique identifier for the volume instance within its deployment context.
 */
export type UniqueIdentifierUID5 = string;
/**
 * The name of the volume instance
 */
export type Name15 = string;
/**
 * The mode for the volume instance.
 */
export type Mode = "filesystem" | "block";
/**
 * The underlying path created from the actual volume.
 */
export type Path = string;
/**
 * The allocated size of the volume accessible to the associated workspace. This should include the scalar size as well as IEC standard unit in either decimal or binary form.
 */
export type SizeAllocated = string;
/**
 * Indicates if the volume persists beyond the life of the resource it is associated with.
 */
export type Persistent = boolean;
/**
 * Indicates if the volume is remotely (i.e., network) attached.
 */
export type Remote = boolean;
export type Properties12 = LightweightNameValuePair[];
export type Properties13 = LightweightNameValuePair[];
/**
 * A set of named filesystem or data resource shareable by workflow tasks.
 */
export type Workspaces = Workspace[];
/**
 * A graph of the component runtime topology for task's instance.
 */
export type RuntimeTopology = Dependency[];
export type Properties14 = LightweightNameValuePair[];
/**
 * The tasks that comprise the workflow.
 */
export type Tasks = Task1[];
/**
 * The graph of dependencies between tasks within the workflow.
 */
export type TaskDependencyGraph = Dependency[];
/**
 * Indicates the types of activities performed by the set of workflow tasks.
 */
export type TaskTypes1 = TaskType[];
/**
 * The sequence of steps for the task.
 */
export type Steps1 = Step[];
/**
 * Represents resources and data brought into a task at runtime by executor or task commands
 */
export type Inputs3 = InputType[];
/**
 * Represents resources and data output from a task at runtime by executor or task commands
 */
export type Outputs3 = OutputType[];
/**
 * The date and time (timestamp) when the task started.
 */
export type TimeStart1 = string;
/**
 * The date and time (timestamp) when the task ended.
 */
export type TimeEnd1 = string;
/**
 * A set of named filesystem or data resource shareable by workflow tasks.
 */
export type Workspaces1 = Workspace[];
/**
 * A graph of the component runtime topology for workflow's instance.
 */
export type RuntimeTopology1 = Dependency[];
export type Properties15 = LightweightNameValuePair[];
/**
 * List of workflows that can be declared to accomplish specific orchestrated goals and independently triggered.
 */
export type Workflows = Workflow[];
export type Properties16 = LightweightNameValuePair[];
/**
 * Describes how a component or service was manufactured or deployed. This is achieved through the use of formulas, workflows, tasks, and steps, which declare the precise steps to reproduce along with the observed formulas describing the steps which transpired in the manufacturing process.
 */
export type Formulation = Formula[];
/**
 * Provides the ability to document properties in a name-value store. This provides flexibility to include data not officially supported in the standard without having to use additional namespaces or create extensions. Unlike key-value stores, properties support duplicate names, each potentially having different values. Property names of interest to the general public are encouraged to be registered in the [CycloneDX Property Taxonomy](https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal registration is OPTIONAL.
 */
export type Properties17 = LightweightNameValuePair[];
/**
 * Enveloped signature in [JSON Signature Format (JSF)](https://cyberphone.github.io/doc/security/jsf.html).
 */
export type Signature9 =
  | {
      signers?: Signature1;
    }
  | {
      chain?: Signature4;
    }
  | Signature5;

export interface CycloneDXSoftwareBillOfMaterialsStandard {
  $schema?: string;
  bomFormat: BOMFormat;
  specVersion: CycloneDXSpecificationVersion;
  serialNumber?: BOMSerialNumber;
  version?: BOMVersion;
  metadata?: BOMMetadata;
  components?: Components2;
  services?: Services2;
  externalReferences?: ExternalReferences3;
  dependencies?: Dependencies;
  compositions?: Compositions;
  vulnerabilities?: Vulnerabilities;
  annotations?: Annotations;
  formulation?: Formulation;
  properties?: Properties17;
  signature?: Signature9;
}
/**
 * Provides additional information about a BOM.
 */
export interface BOMMetadata {
  timestamp?: Timestamp;
  lifecycles?: Lifecycles;
  tools?: CreationTools | CreationToolsLegacy;
  authors?: Authors;
  component?: Component;
  manufacture?: Manufacture;
  supplier?: Supplier;
  licenses?: BOMLicenseS;
  properties?: Properties4;
}
/**
 * The tool(s) used in the creation of the BOM.
 */
export interface CreationTools {
  components?: Components;
  services?: Services;
}
export interface ComponentObject {
  type: ComponentType;
  "mime-type"?: MimeType;
  "bom-ref"?: BOMReference;
  supplier?: ComponentSupplier;
  author?: ComponentAuthor;
  publisher?: ComponentPublisher;
  group?: ComponentGroup;
  name: ComponentName;
  version?: ComponentVersion;
  description?: ComponentDescription;
  scope?: ComponentScope;
  hashes?: ComponentHashes;
  licenses?: ComponentLicenseS;
  copyright?: ComponentCopyright;
  cpe?: ComponentCommonPlatformEnumerationCPE;
  purl?: ComponentPackageURLPurl;
  swid?: SWIDTag;
  modified?: ComponentModifiedFromOriginal;
  pedigree?: ComponentPedigree;
  externalReferences?: ExternalReferences;
  components?: Components1;
  evidence?: Evidence;
  releaseNotes?: ReleaseNotes;
  modelCard?: MachineLearningModelCard;
  data?: Data;
  properties?: Properties2;
  signature?: Signature;
}
/**
 *  The organization that supplied the component. The supplier may often be the manufacturer, but may also be a distributor or repackager.
 */
export interface ComponentSupplier {
  "bom-ref"?: BOMReference1;
  name?: Name1;
  url?: URL;
  contact?: Contact;
}
export interface OrganizationalContactObject {
  "bom-ref"?: BOMReference2;
  name?: Name2;
  email?: EmailAddress;
  phone?: Phone;
}
export interface HashObjects {
  alg: HashAlgorithm;
  content: HashContentValue;
}
/**
 * Specifies metadata and content for [ISO-IEC 19770-2 Software Identification (SWID) Tags](https://www.iso.org/standard/65666.html).
 */
export interface SWIDTag {
  tagId: TagID;
  name: Name3;
  version?: Version;
  tagVersion?: TagVersion;
  patch?: Patch;
  text?: AttachmentText;
  url?: URL1;
}
/**
 * Specifies the metadata and content of the SWID tag.
 */
export interface AttachmentText {
  contentType?: ContentType;
  encoding?: Encoding;
  content: AttachmentText1;
}
/**
 * Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc. Pedigree supports viewing this complex chain from the beginning, the end, or anywhere in the middle. It also provides a way to document variants where the exact relation may not be known.
 */
export interface ComponentPedigree {
  ancestors?: Ancestors;
  descendants?: Descendants;
  variants?: Variants;
  commits?: Commits;
  patches?: Patches;
  notes?: Notes;
}
/**
 * Specifies an individual commit
 */
export interface Commit {
  uid?: UID;
  url?: URL2;
  author?: Author;
  committer?: Committer;
  message?: Message;
}
/**
 * The author who created the changes in the commit
 */
export interface Author {
  timestamp?: Timestamp1;
  name?: Name4;
  email?: EMail;
}
/**
 * The person who committed or pushed the commit
 */
export interface Committer {
  timestamp?: Timestamp1;
  name?: Name4;
  email?: EMail;
}
/**
 * Specifies an individual patch
 */
export interface Patch1 {
  type: Type;
  diff?: Diff;
  resolves?: Resolves;
}
/**
 * The patch file (or diff) that show changes. Refer to [https://en.wikipedia.org/wiki/Diff](https://en.wikipedia.org/wiki/Diff)
 */
export interface Diff {
  text?: DiffText;
  url?: URL3;
}
/**
 * Specifies the optional text of the diff
 */
export interface DiffText {
  contentType?: ContentType;
  encoding?: Encoding;
  content: AttachmentText1;
}
/**
 * An individual issue that has been resolved.
 */
export interface Diff1 {
  type: Type1;
  id?: ID;
  name?: Name5;
  description?: Description1;
  source?: Source;
  references?: References;
}
/**
 * The source of the issue where it is documented
 */
export interface Source {
  name?: Name6;
  url?: URL4;
}
/**
 * External references provide a way to document systems, sites, and information that may be relevant, but are not included with the BOM. They may also establish specific relationships within or external to the BOM.
 */
export interface ExternalReference {
  url: URL5;
  comment?: Comment;
  type: Type2;
  hashes?: Hashes;
}
/**
 * Provides the ability to document evidence collected through various forms of extraction or analysis.
 */
export interface Evidence {
  /**
   * Evidence that substantiates the identity of a component.
   */
  identity?: {
    field: Field;
    confidence?: Confidence;
    methods?: Methods;
    tools?: BOMReferences;
  };
  occurrences?: Occurrences;
  /**
   * Evidence of the components use through the callstack.
   */
  callstack?: {
    frames?: Methods1;
  };
  licenses?: ComponentLicenseS1;
  copyright?: Copyright;
}
export interface Copyright1 {
  text: CopyrightText;
}
/**
 * Specifies optional release notes.
 */
export interface ReleaseNotes {
  type: Type3;
  title?: Title;
  featuredImage?: FeaturedImage;
  socialImage?: SocialImage;
  description?: Description2;
  timestamp?: Timestamp2;
  aliases?: Aliases;
  tags?: Tags;
  resolves?: Resolves1;
  notes?: Notes1;
  properties?: Properties;
}
/**
 * A note containing the locale and content.
 */
export interface Note {
  locale?: Locale;
  text: ReleaseNoteContent;
}
/**
 * Specifies the full content of the release note.
 */
export interface ReleaseNoteContent {
  contentType?: ContentType;
  encoding?: Encoding;
  content: AttachmentText1;
}
/**
 * Provides the ability to document properties in a name-value store. This provides flexibility to include data not officially supported in the standard without having to use additional namespaces or create extensions. Unlike key-value stores, properties support duplicate names, each potentially having different values. Property names of interest to the general public are encouraged to be registered in the [CycloneDX Property Taxonomy](https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal registration is OPTIONAL.
 */
export interface LightweightNameValuePair {
  name?: Name7;
  value?: Value1;
  [k: string]: unknown;
}
/**
 * A model card describes the intended uses of a machine learning model and potential limitations, including biases and ethical considerations. Model cards typically contain the training parameters, which datasets were used to train the model, performance metrics, and other relevant data useful for ML transparency. This object SHOULD be specified for any component of type `machine-learning-model` and MUST NOT be specified for other component types.
 */
export interface MachineLearningModelCard {
  "bom-ref"?: BOMReference5;
  modelParameters?: ModelParameters;
  quantitativeAnalysis?: QuantitativeAnalysis;
  considerations?: Considerations;
  properties?: Properties1;
}
/**
 * Hyper-parameters for construction of the model.
 */
export interface ModelParameters {
  approach?: Approach;
  task?: Task;
  architectureFamily?: ArchitectureFamily;
  modelArchitecture?: ModelArchitecture;
  datasets?: Datasets;
  inputs?: Inputs;
  outputs?: Outputs;
}
/**
 * The overall approach to learning used by the model for problem solving.
 */
export interface Approach {
  type?: LearningType;
}
export interface InlineComponentData {
  "bom-ref"?: BOMReference6;
  type: TypeOfData;
  /**
   * The name of the dataset.
   */
  name?: string;
  contents?: DataContents;
  classification?: DataClassification;
  /**
   * A description of any sensitive data in a dataset.
   */
  sensitiveData?: string[];
  graphics?: GraphicsCollection;
  /**
   * A description of the dataset. Can describe size of dataset, whether it's used for source code, training, testing, or validation, etc.
   */
  description?: string;
  governance?: DataGovernance;
}
/**
 * The contents or references to the contents of the data being described.
 */
export interface DataContents {
  attachment?: DataAttachment;
  url?: DataURL;
  properties?: ConfigurationProperties;
}
/**
 * An optional way to include textual or encoded data.
 */
export interface DataAttachment {
  contentType?: ContentType;
  encoding?: Encoding;
  content: AttachmentText1;
}
/**
 * A collection of graphics that represent various measurements.
 */
export interface GraphicsCollection {
  /**
   * A description of this collection of graphics.
   */
  description?: string;
  /**
   * A collection of graphics.
   */
  collection?: Graphic[];
}
export interface Graphic {
  /**
   * The name of the graphic.
   */
  name?: string;
  image?: GraphicImage;
}
/**
 * The graphic (vector or raster). Base64 encoding MUST be specified for binary images.
 */
export interface GraphicImage {
  contentType?: ContentType;
  encoding?: Encoding;
  content: AttachmentText1;
}
export interface DataGovernance {
  custodians?: DataCustodians;
  stewards?: DataStewards;
  owners?: DataOwners;
}
export interface Organization {
  "bom-ref"?: BOMReference1;
  name?: Name1;
  url?: URL;
  contact?: Contact;
}
export interface OrganizationalContactObject1 {
  "bom-ref"?: BOMReference2;
  name?: Name2;
  email?: EmailAddress;
  phone?: Phone;
}
export interface DataComponentReference {
  ref?: Reference;
}
export interface InputAndOutputParameters {
  /**
   * The data format for input/output to the model. Example formats include string, image, time-series
   */
  format?: string;
}
/**
 * A quantitative analysis of the model
 */
export interface QuantitativeAnalysis {
  performanceMetrics?: PerformanceMetrics;
  graphics?: GraphicsCollection;
}
export interface PerformanceMetric {
  /**
   * The type of performance metric.
   */
  type?: string;
  /**
   * The value of the performance metric.
   */
  value?: string;
  /**
   * The name of the slice this metric was computed on. By default, assume this metric is not sliced.
   */
  slice?: string;
  /**
   * The confidence interval of the metric.
   */
  confidenceInterval?: {
    /**
     * The lower bound of the confidence interval.
     */
    lowerBound?: string;
    /**
     * The upper bound of the confidence interval.
     */
    upperBound?: string;
  };
}
/**
 * What considerations should be taken into account regarding the model's construction, training, and application?
 */
export interface Considerations {
  users?: Users;
  useCases?: UseCases;
  technicalLimitations?: TechnicalLimitations;
  performanceTradeoffs?: PerformanceTradeoffs;
  ethicalConsiderations?: EthicalConsiderations;
  fairnessAssessments?: FairnessAssessments;
}
export interface Risk {
  /**
   * The name of the risk.
   */
  name?: string;
  /**
   * Strategy used to address this risk.
   */
  mitigationStrategy?: string;
}
/**
 * Information about the benefits and harms of the model to an identified at risk group.
 */
export interface FairnessAssessment {
  /**
   * The groups or individuals at risk of being systematically disadvantaged by the model.
   */
  groupAtRisk?: string;
  /**
   * Expected benefits to the identified groups.
   */
  benefits?: string;
  /**
   * Expected harms to the identified groups.
   */
  harms?: string;
  /**
   * With respect to the benefits and harms outlined, please describe any mitigation strategy implemented.
   */
  mitigationStrategy?: string;
}
export interface ComponentData {
  "bom-ref"?: BOMReference6;
  type: TypeOfData;
  /**
   * The name of the dataset.
   */
  name?: string;
  contents?: DataContents;
  classification?: DataClassification;
  /**
   * A description of any sensitive data in a dataset.
   */
  sensitiveData?: string[];
  graphics?: GraphicsCollection;
  /**
   * A description of the dataset. Can describe size of dataset, whether it's used for source code, training, testing, or validation, etc.
   */
  description?: string;
  governance?: DataGovernance;
}
export interface Signature2 {
  algorithm: Algorithm | Algorithm1;
  keyId?: KeyID;
  publicKey?: PublicKey;
  certificatePath?: CertificatePath;
  excludes?: Excludes;
  value: Signature3;
}
/**
 * Unique top level property for simple signatures. (signaturecore)
 */
export interface Signature5 {
  algorithm: Algorithm | Algorithm1;
  keyId?: KeyID;
  publicKey?: PublicKey;
  certificatePath?: CertificatePath;
  excludes?: Excludes;
  value: Signature3;
}
export interface ServiceObject {
  "bom-ref"?: BOMReference7;
  provider?: Provider;
  group?: ServiceGroup;
  name: ServiceName;
  version?: ServiceVersion;
  description?: ServiceDescription;
  endpoints?: Endpoints;
  authenticated?: AuthenticationRequired;
  "x-trust-boundary"?: CrossesTrustBoundary;
  trustZone?: TrustZone;
  data?: Data1;
  licenses?: ComponentLicenseS2;
  externalReferences?: ExternalReferences1;
  services?: Services1;
  releaseNotes?: ReleaseNotes1;
  properties?: Properties3;
  signature?: Signature6;
}
/**
 * The organization that provides the service.
 */
export interface Provider {
  "bom-ref"?: BOMReference1;
  name?: Name1;
  url?: URL;
  contact?: Contact;
}
export interface HashObjects1 {
  flow: DirectionalFlow;
  classification: DataClassification;
  name?: Name8;
  description?: Description3;
  governance?: DataGovernance1;
  source?: Source1;
  destination?: Destination;
}
export interface DataGovernance1 {
  custodians?: DataCustodians;
  stewards?: DataStewards;
  owners?: DataOwners;
}
/**
 * Specifies optional release notes.
 */
export interface ReleaseNotes1 {
  type: Type3;
  title?: Title;
  featuredImage?: FeaturedImage;
  socialImage?: SocialImage;
  description?: Description2;
  timestamp?: Timestamp2;
  aliases?: Aliases;
  tags?: Tags;
  resolves?: Resolves1;
  notes?: Notes1;
  properties?: Properties;
}
/**
 * [Deprecated] - DO NOT USE. This will be removed in a future version. This will be removed in a future version. Use component or service instead. Information about the automated or manual tool used
 */
export interface Tool {
  vendor?: ToolVendor;
  name?: ToolName;
  version?: ToolVersion;
  hashes?: Hashes1;
  externalReferences?: ExternalReferences2;
}
/**
 * The component that the BOM describes.
 */
export interface Component {
  type: ComponentType;
  "mime-type"?: MimeType;
  "bom-ref"?: BOMReference;
  supplier?: ComponentSupplier;
  author?: ComponentAuthor;
  publisher?: ComponentPublisher;
  group?: ComponentGroup;
  name: ComponentName;
  version?: ComponentVersion;
  description?: ComponentDescription;
  scope?: ComponentScope;
  hashes?: ComponentHashes;
  licenses?: ComponentLicenseS;
  copyright?: ComponentCopyright;
  cpe?: ComponentCommonPlatformEnumerationCPE;
  purl?: ComponentPackageURLPurl;
  swid?: SWIDTag;
  modified?: ComponentModifiedFromOriginal;
  pedigree?: ComponentPedigree;
  externalReferences?: ExternalReferences;
  components?: Components1;
  evidence?: Evidence;
  releaseNotes?: ReleaseNotes;
  modelCard?: MachineLearningModelCard;
  data?: Data;
  properties?: Properties2;
  signature?: Signature;
}
/**
 * The organization that manufactured the component that the BOM describes.
 */
export interface Manufacture {
  "bom-ref"?: BOMReference1;
  name?: Name1;
  url?: URL;
  contact?: Contact;
}
/**
 *  The organization that supplied the component that the BOM describes. The supplier may often be the manufacturer, but may also be a distributor or repackager.
 */
export interface Supplier {
  "bom-ref"?: BOMReference1;
  name?: Name1;
  url?: URL;
  contact?: Contact;
}
/**
 * Defines the direct dependencies of a component or service. Components or services that do not have their own dependencies MUST be declared as empty elements within the graph. Components or services that are not represented in the dependency graph MAY have unknown dependencies. It is RECOMMENDED that implementations assume this to be opaque and not an indicator of a object being dependency-free. It is RECOMMENDED to leverage compositions to indicate unknown dependency graphs.
 */
export interface Dependency {
  ref: Reference1;
  dependsOn?: DependsOn;
}
export interface Compositions1 {
  "bom-ref"?: BOMReference8;
  aggregate: Aggregate;
  assemblies?: BOMReferences1;
  dependencies?: BOMReferences2;
  vulnerabilities?: BOMReferences3;
  signature?: Signature7;
}
/**
 * Defines a weakness in a component or service that could be exploited or triggered by a threat source.
 */
export interface Vulnerability {
  "bom-ref"?: BOMReference9;
  id?: ID1;
  source?: Source2;
  references?: References1;
  ratings?: Ratings;
  cwes?: CWEs;
  description?: Description4;
  detail?: Details;
  recommendation?: Recommendation;
  workaround?: Workarounds;
  proofOfConcept?: ProofOfConcept;
  advisories?: Advisories;
  created?: Created;
  published?: Published;
  updated?: Updated;
  rejected?: Rejected;
  credits?: Credits;
  tools?: Tools | ToolsLegacy;
  analysis?: ImpactAnalysis;
  affects?: Affects;
  properties?: Properties5;
}
/**
 * The source that published the vulnerability.
 */
export interface Source2 {
  url?: URL9;
  name?: Name9;
}
/**
 * The source that published the vulnerability.
 */
export interface Source3 {
  url?: URL9;
  name?: Name9;
}
/**
 * Defines the severity or risk ratings of a vulnerability.
 */
export interface Rating {
  source?: Source4;
  score?: Score;
  severity?: Severity;
  method?: Method;
  vector?: Vector;
  justification?: Justification;
}
/**
 * The source that calculated the severity or risk rating of the vulnerability.
 */
export interface Source4 {
  url?: URL9;
  name?: Name9;
}
/**
 * Evidence used to reproduce the vulnerability.
 */
export interface ProofOfConcept {
  reproductionSteps?: StepsToReproduce;
  environment?: Environment;
  supportingMaterial?: SupportingMaterial;
  [k: string]: unknown;
}
/**
 * Specifies the metadata and content for an attachment.
 */
export interface Attachment {
  contentType?: ContentType;
  encoding?: Encoding;
  content: AttachmentText1;
}
/**
 * Title and location where advisory information can be obtained. An advisory is a notification of a threat to a component, service, or system.
 */
export interface Advisory {
  title?: Title1;
  url: URL10;
}
/**
 * Individuals or organizations credited with the discovery of the vulnerability.
 */
export interface Credits {
  organizations?: Organizations;
  individuals?: Individuals;
}
export interface OrganizationalEntityObject {
  "bom-ref"?: BOMReference1;
  name?: Name1;
  url?: URL;
  contact?: Contact;
}
/**
 * The tool(s) used to identify, confirm, or score the vulnerability.
 */
export interface Tools {
  components?: Components3;
  services?: Services3;
}
/**
 * An assessment of the impact and exploitability of the vulnerability.
 */
export interface ImpactAnalysis {
  state?: ImpactAnalysisState;
  justification?: ImpactAnalysisJustification;
  response?: Response;
  detail?: Detail;
  firstIssued?: FirstIssued;
  lastUpdated?: LastUpdated;
}
/**
 * A comment, note, explanation, or similar textual content which provides additional context to the object(s) being annotated.
 */
export interface Annotations1 {
  "bom-ref"?: BOMReference10;
  subjects: BOMReferences4;
  annotator: Annotator;
  timestamp: Timestamp3;
  text: Text;
  signature?: Signature8;
}
/**
 * Describes workflows and resources that captures rules and other aspects of how the associated BOM component or service was formed.
 */
export interface Formula {
  "bom-ref"?: BOMReference11;
  components?: Components4;
  services?: Services4;
  workflows?: Workflows;
  properties?: Properties16;
}
/**
 * A specialized orchestration task.
 */
export interface Workflow {
  "bom-ref": BOMReference12;
  uid: UniqueIdentifierUID;
  name?: Name10;
  description?: Description5;
  resourceReferences?: ResourceReferences;
  tasks?: Tasks;
  taskDependencies?: TaskDependencyGraph;
  taskTypes: TaskTypes1;
  trigger?: Trigger1;
  steps?: Steps1;
  inputs?: Inputs3;
  outputs?: Outputs3;
  timeStart?: TimeStart1;
  timeEnd?: TimeEnd1;
  workspaces?: Workspaces1;
  runtimeTopology?: RuntimeTopology1;
  properties?: Properties15;
}
/**
 * Describes the inputs, sequence of steps and resources used to accomplish a task and its output.
 */
export interface Task1 {
  "bom-ref": BOMReference13;
  uid: UniqueIdentifierUID1;
  name?: Name11;
  description?: Description6;
  resourceReferences?: ResourceReferences1;
  taskTypes: TaskTypes;
  trigger?: Trigger;
  steps?: Steps;
  inputs?: Inputs2;
  outputs?: Outputs2;
  timeStart?: TimeStart;
  timeEnd?: TimeEnd;
  workspaces?: Workspaces;
  runtimeTopology?: RuntimeTopology;
  properties?: Properties14;
}
/**
 * The trigger that initiated the task.
 */
export interface Trigger {
  "bom-ref": BOMReference14;
  uid: UniqueIdentifierUID2;
  name?: Name12;
  description?: Description7;
  resourceReferences?: ResourceReferences2;
  type: Type4;
  event?: Event;
  conditions?: Condition[];
  timeActivated?: TimeActivated;
  inputs?: Inputs1;
  outputs?: Outputs1;
  properties?: Properties9;
}
/**
 * The event data that caused the associated trigger to activate.
 */
export interface Event {
  uid?: UniqueIdentifierUID3;
  description?: Description8;
  timeReceived?: TimeReceived;
  data?: Attachment1;
  source?: ResourceReferenceChoice1;
  target?: ResourceReferenceChoice2;
  properties?: Properties6;
}
/**
 * Specifies the metadata and content for an attachment.
 */
export interface Attachment1 {
  contentType?: ContentType;
  encoding?: Encoding;
  content: AttachmentText1;
}
/**
 * A condition that was used to determine a trigger should be activated.
 */
export interface Condition {
  description?: Description9;
  expression?: Expression;
  properties?: Properties7;
}
/**
 * Specifies the metadata and content for an attachment.
 */
export interface Attachment2 {
  contentType?: ContentType;
  encoding?: Encoding;
  content: AttachmentText1;
}
/**
 * Executes specific commands or tools in order to accomplish its owning task as part of a sequence.
 */
export interface Step {
  name?: Name13;
  description?: Description10;
  commands?: Commands;
  properties?: Properties11;
}
export interface Command {
  executed?: Executed;
  properties?: Properties10;
}
/**
 * A named filesystem or data resource shareable by workflow tasks.
 */
export interface Workspace {
  "bom-ref": BOMReference15;
  uid: UniqueIdentifierUID4;
  name?: Name14;
  aliases?: Aliases1;
  description?: Description11;
  resourceReferences?: ResourceReferences3;
  accessMode?: AccessMode;
  mountPath?: MountPath;
  managedDataType?: ManagedDataType;
  volumeRequest?: VolumeRequest;
  volume?: Volume;
  properties?: Properties13;
}
/**
 * Information about the actual volume instance allocated to the workspace.
 */
export interface Volume {
  uid?: UniqueIdentifierUID5;
  name?: Name15;
  mode?: Mode;
  path?: Path;
  sizeAllocated?: SizeAllocated;
  persistent?: Persistent;
  remote?: Remote;
  properties?: Properties12;
}
/**
 * The trigger that initiated the task.
 */
export interface Trigger1 {
  "bom-ref": BOMReference14;
  uid: UniqueIdentifierUID2;
  name?: Name12;
  description?: Description7;
  resourceReferences?: ResourceReferences2;
  type: Type4;
  event?: Event;
  conditions?: Condition[];
  timeActivated?: TimeActivated;
  inputs?: Inputs1;
  outputs?: Outputs1;
  properties?: Properties9;
}
